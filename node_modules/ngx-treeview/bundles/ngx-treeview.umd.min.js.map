{"version":3,"sources":["../../../projects/ngx-treeview/src/lib/directives/dropdown.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-menu.directive.ts","../../../projects/ngx-treeview/src/lib/directives/dropdown-toggle.directive.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-treeview/src/lib/models/treeview-i18n.ts","../../../projects/ngx-treeview/src/lib/models/treeview-config.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-helper.ts","../../../projects/ngx-treeview/src/lib/models/treeview-item.ts","../../../projects/ngx-treeview/src/lib/helpers/treeview-event-parser.ts","../../../projects/ngx-treeview/src/lib/components/treeview/treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/dropdown-treeview/dropdown-treeview.component.ts","../../../projects/ngx-treeview/src/lib/components/treeview-item/treeview-item.component.ts","../../../projects/ngx-treeview/src/lib/pipes/treeview.pipe.ts","../../../projects/ngx-treeview/src/lib/treeview.module.ts"],"names":["DropdownDirective","this","internalOpen","openChange","EventEmitter","Object","defineProperty","prototype","onKeyupEsc","close","onDocumentClick","event","button","isEventFromToggle","open","emit","toggle","isOpen","isNil","toggleElement","contains","target","Directive","args","selector","exportAs","Input","Output","HostBinding","HostListener","dropdown","host","[class.dropdown-menu]","[class.show]","elementRef","nativeElement","class","aria-haspopup","[attr.aria-expanded]","(click)","ElementRef","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","Injectable","DefaultTreeviewI18n","_super","getText","selection","uncheckedItems","checkedItems","getAllCheckboxText","text","getFilterPlaceholder","getFilterNoItemsFoundText","getTooltipCollapseExpandText","isCollapse","TreeviewI18n","TreeviewConfig","hasAllCheckBox","hasFilter","hasCollapseExpand","decoupleChildFromParent","maxHeight","fields","config","assign","TreeviewHelper","findItem","findItemInList","list","list_1","list_1_1","foundItem","findParent","removeItem","root","item","parent","pull","children","undefined","correctChecked","concatSelection","items","checked","unchecked","items_1","items_1_1","getSelection","_b","_c","child","TreeviewItem","autoCorrectChecked","_this","internalDisabled","internalChecked","internalCollapsed","Error","isString","isBoolean","collapsed","disabled","map","setCheckedRecursive","internalChildren","forEach","setCollapsedRecursive","checked_1","getCorrectChecked","DefaultTreeviewEventParser","getSelectedChange","component","TreeviewEventParser","DownlineTreeviewEventParser","result_1","links","getLinks","link_1","result_2","OrderDownlineTreeviewEventParser","apply","currentDownlines","parser","newDownlines","intersectDownlines_1","downline","foundIndex","splice","FilterTreeviewItem","refItem","updateRefChecked","refChecked","TreeviewComponent","i18n","defaultConfig","eventParser","selectedChange","filterChange","filterText","allItem","filterItems","ngOnInit","createHeaderTemplateContext","generateSelection","ngOnChanges","changes","itemsSimpleChange","updateFilterItems","updateCollapsedOfAll","raiseSelectedChange","onAllCollapseExpand","onFilterTextChange","onAllCheckedChange","onItemCheckedChange","updateCheckedOfAll","values","setTimeout","headerTemplateContext","onCheckedChange","onCollapseExpand","filterItems_1","filterText_1","toLowerCase","newItem","filterItem","includes","children_1","newChild","itemChecked","hasItemExpanded","Component","template","DropdownTreeviewComponent","buttonClass","onSelectedChange","buttonLabel","treeviewComponent","onFilterChange","ViewChild","static","TreeviewItemComponent","checkedChange","onChildCheckedChange","childItem","TreeviewPipe","transform","objects","textField","object","Pipe","name","TreeviewModule","forRoot","ngModule","providers","provide","useClass","NgModule","imports","FormsModule","CommonModule","declarations","DropdownMenuDirective","DropdownToggleDirective","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdown]',\r\n  exportAs: 'ngxDropdown'\r\n})\r\nexport class DropdownDirective {\r\n  toggleElement: any;\r\n  @Input('open') internalOpen = false;\r\n  @Output() openChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.show') get isOpen(): boolean {\r\n    return this.internalOpen;\r\n  }\r\n\r\n  @HostListener('keyup.esc')\r\n  onKeyupEsc(): void {\r\n    this.close();\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: MouseEvent): void {\r\n    if (event.button !== 2 && !this.isEventFromToggle(event)) {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  open(): void {\r\n    if (!this.internalOpen) {\r\n      this.internalOpen = true;\r\n      this.openChange.emit(true);\r\n    }\r\n  }\r\n\r\n  close(): void {\r\n    if (this.internalOpen) {\r\n      this.internalOpen = false;\r\n      this.openChange.emit(false);\r\n    }\r\n  }\r\n\r\n  toggle(): void {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  private isEventFromToggle(event: MouseEvent): boolean {\r\n    return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\r\n  }\r\n}\r\n","import { Directive, HostBinding } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownMenu]',\r\n  host: {\r\n    '[class.dropdown-menu]': 'true',\r\n    '[class.show]': 'dropdown.isOpen'\r\n  }\r\n})\r\nexport class DropdownMenuDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective\r\n  ) { }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\nimport { DropdownDirective } from './dropdown.directive';\r\n\r\n@Directive({\r\n  selector: '[ngxDropdownToggle]',\r\n  host: {\r\n    class: 'dropdown-toggle',\r\n    'aria-haspopup': 'true',\r\n    '[attr.aria-expanded]': 'dropdown.isOpen',\r\n    '(click)': 'dropdown.toggle()'\r\n  }\r\n})\r\nexport class DropdownToggleDirective {\r\n  constructor(\r\n    public dropdown: DropdownDirective,\r\n    elementRef: ElementRef\r\n  ) {\r\n    dropdown.toggleElement = elementRef.nativeElement;\r\n  }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TreeviewSelection } from './treeview-item';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewI18n {\r\n  abstract getText(selection: TreeviewSelection): string;\r\n  abstract getAllCheckboxText(): string;\r\n  abstract getFilterPlaceholder(): string;\r\n  abstract getFilterNoItemsFoundText(): string;\r\n  abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewI18n extends TreeviewI18n {\r\n  getText(selection: TreeviewSelection): string {\r\n    if (selection.uncheckedItems.length === 0) {\r\n      if (selection.checkedItems.length > 0) {\r\n        return this.getAllCheckboxText();\r\n      } else {\r\n        return '';\r\n      }\r\n    }\r\n\r\n    switch (selection.checkedItems.length) {\r\n      case 0:\r\n        return 'Select options';\r\n      case 1:\r\n        return selection.checkedItems[0].text;\r\n      default:\r\n        return `${selection.checkedItems.length} options selected`;\r\n    }\r\n  }\r\n\r\n  getAllCheckboxText(): string {\r\n    return 'All';\r\n  }\r\n\r\n  getFilterPlaceholder(): string {\r\n    return 'Filter';\r\n  }\r\n\r\n  getFilterNoItemsFoundText(): string {\r\n    return 'No items found';\r\n  }\r\n\r\n  getTooltipCollapseExpandText(isCollapse: boolean): string {\r\n    return isCollapse ? 'Expand' : 'Collapse';\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class TreeviewConfig {\r\n  hasAllCheckBox = true;\r\n  hasFilter = false;\r\n  hasCollapseExpand = false;\r\n  decoupleChildFromParent = false;\r\n  maxHeight = 500;\r\n\r\n  get hasDivider(): boolean {\r\n    return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\r\n  }\r\n\r\n  public static create(fields?: {\r\n    hasAllCheckBox?: boolean,\r\n    hasFilter?: boolean,\r\n    hasCollapseExpand?: boolean,\r\n    decoupleChildFromParent?: boolean\r\n    maxHeight?: number,\r\n  }): TreeviewConfig {\r\n    const config = new TreeviewConfig();\r\n    Object.assign(config, fields);\r\n    return config;\r\n  }\r\n}\r\n","import { concat, isNil, pull } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\nexport const TreeviewHelper = {\r\n  findItem,\r\n  findItemInList,\r\n  findParent,\r\n  removeItem,\r\n  concatSelection\r\n};\r\n\r\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\r\n  if (isNil(root)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (root.value === value) {\r\n    return root;\r\n  }\r\n\r\n  if (root.children) {\r\n    for (const child of root.children) {\r\n      const foundItem = findItem(child, value);\r\n      if (foundItem) {\r\n        return foundItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\r\n  if (isNil(list)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const item of list) {\r\n    const foundItem = findItem(item, value);\r\n    if (foundItem) {\r\n      return foundItem;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\r\n  if (isNil(root) || isNil(root.children)) {\r\n    return undefined;\r\n  }\r\n\r\n  for (const child of root.children) {\r\n    if (child === item) {\r\n      return root;\r\n    } else {\r\n      const parent = findParent(child, item);\r\n      if (parent) {\r\n        return parent;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\r\n  const parent = findParent(root, item);\r\n  if (parent) {\r\n    pull(parent.children, item);\r\n    if (parent.children.length === 0) {\r\n      parent.children = undefined;\r\n    } else {\r\n      parent.correctChecked();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\r\n  let checkedItems = [...checked];\r\n  let uncheckedItems = [...unchecked];\r\n  for (const item of items) {\r\n    const selection = item.getSelection();\r\n    checkedItems = concat(checkedItems, selection.checkedItems);\r\n    uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\r\n  }\r\n  return {\r\n    checked: checkedItems,\r\n    unchecked: uncheckedItems\r\n  };\r\n}\r\n","import { isBoolean, isNil, isString } from 'lodash';\r\nimport { TreeviewHelper } from '../helpers/treeview-helper';\r\n\r\nexport interface TreeviewSelection {\r\n  checkedItems: TreeviewItem[];\r\n  uncheckedItems: TreeviewItem[];\r\n}\r\n\r\nexport interface TreeItem {\r\n  text: string;\r\n  value: any;\r\n  disabled?: boolean;\r\n  checked?: boolean;\r\n  collapsed?: boolean;\r\n  children?: TreeItem[];\r\n}\r\n\r\nexport class TreeviewItem {\r\n  private internalDisabled = false;\r\n  private internalChecked = true;\r\n  private internalCollapsed = false;\r\n  private internalChildren: TreeviewItem[];\r\n  text: string;\r\n  value: any;\r\n\r\n  constructor(item: TreeItem, autoCorrectChecked = false) {\r\n    if (isNil(item)) {\r\n      throw new Error('Item must be defined');\r\n    }\r\n    if (isString(item.text)) {\r\n      this.text = item.text;\r\n    } else {\r\n      throw new Error('A text of item must be string object');\r\n    }\r\n    this.value = item.value;\r\n    if (isBoolean(item.checked)) {\r\n      this.checked = item.checked;\r\n    }\r\n    if (isBoolean(item.collapsed)) {\r\n      this.collapsed = item.collapsed;\r\n    }\r\n    if (isBoolean(item.disabled)) {\r\n      this.disabled = item.disabled;\r\n    }\r\n    if (!isNil(item.children) && item.children.length > 0) {\r\n      this.children = item.children.map(child => {\r\n        if (this.disabled === true) {\r\n          child.disabled = true;\r\n        }\r\n\r\n        return new TreeviewItem(child);\r\n      });\r\n    }\r\n\r\n    if (autoCorrectChecked) {\r\n      this.correctChecked();\r\n    }\r\n  }\r\n\r\n  get checked(): boolean {\r\n    return this.internalChecked;\r\n  }\r\n\r\n  set checked(value: boolean) {\r\n    if (!this.internalDisabled) {\r\n      if (this.internalChecked !== value) {\r\n        this.internalChecked = value;\r\n      }\r\n    }\r\n  }\r\n\r\n  get indeterminate(): boolean {\r\n    return this.checked === undefined;\r\n  }\r\n\r\n  setCheckedRecursive(value: boolean): void {\r\n    if (!this.internalDisabled) {\r\n      this.internalChecked = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\r\n      }\r\n    }\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this.internalDisabled;\r\n  }\r\n\r\n  set disabled(value: boolean) {\r\n    if (this.internalDisabled !== value) {\r\n      this.internalDisabled = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        this.internalChildren.forEach(child => child.disabled = value);\r\n      }\r\n    }\r\n  }\r\n\r\n  get collapsed(): boolean {\r\n    return this.internalCollapsed;\r\n  }\r\n\r\n  set collapsed(value: boolean) {\r\n    if (this.internalCollapsed !== value) {\r\n      this.internalCollapsed = value;\r\n    }\r\n  }\r\n\r\n  setCollapsedRecursive(value: boolean): void {\r\n    this.internalCollapsed = value;\r\n    if (!isNil(this.internalChildren)) {\r\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\r\n    }\r\n  }\r\n\r\n  get children(): TreeviewItem[] {\r\n    return this.internalChildren;\r\n  }\r\n\r\n  set children(value: TreeviewItem[]) {\r\n    if (this.internalChildren !== value) {\r\n      if (!isNil(value) && value.length === 0) {\r\n        throw new Error('Children must be not an empty array');\r\n      }\r\n      this.internalChildren = value;\r\n      if (!isNil(this.internalChildren)) {\r\n        let checked = null;\r\n        this.internalChildren.forEach(child => {\r\n          if (checked === null) {\r\n            checked = child.checked;\r\n          } else {\r\n            if (child.checked !== checked) {\r\n              checked = undefined;\r\n              return;\r\n            }\r\n          }\r\n        });\r\n        this.internalChecked = checked;\r\n      }\r\n    }\r\n  }\r\n\r\n  getSelection(): TreeviewSelection {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (isNil(this.internalChildren)) {\r\n      if (this.internalChecked) {\r\n        checkedItems.push(this);\r\n      } else {\r\n        uncheckedItems.push(this);\r\n      }\r\n    } else {\r\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    return {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  correctChecked(): void {\r\n    this.internalChecked = this.getCorrectChecked();\r\n  }\r\n\r\n  private getCorrectChecked(): boolean {\r\n    let checked: boolean = null;\r\n    if (!isNil(this.internalChildren)) {\r\n      for (const child of this.internalChildren) {\r\n        child.internalChecked = child.getCorrectChecked();\r\n        if (checked === null) {\r\n          checked = child.internalChecked;\r\n        } else if (checked !== child.internalChecked) {\r\n          checked = undefined;\r\n          break;\r\n        }\r\n      }\r\n    } else {\r\n      checked = this.checked;\r\n    }\r\n\r\n    return checked;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\nimport { TreeviewComponent } from '../components/treeview/treeview.component';\r\n\r\n@Injectable()\r\nexport abstract class TreeviewEventParser {\r\n  abstract getSelectedChange(component: TreeviewComponent): any[];\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const checkedItems = component.selection.checkedItems;\r\n    if (!isNil(checkedItems)) {\r\n      return checkedItems.map(item => item.value);\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n\r\nexport interface DownlineTreeviewItem {\r\n  item: TreeviewItem;\r\n  parent: DownlineTreeviewItem;\r\n}\r\n\r\n@Injectable()\r\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const items = component.items;\r\n    if (!isNil(items)) {\r\n      let result: DownlineTreeviewItem[] = [];\r\n      items.forEach(item => {\r\n        const links = this.getLinks(item, null);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\r\n    if (!isNil(item.children)) {\r\n      const link = {\r\n        item,\r\n        parent\r\n      };\r\n      let result: DownlineTreeviewItem[] = [];\r\n      item.children.forEach(child => {\r\n        const links = this.getLinks(child, link);\r\n        if (!isNil(links)) {\r\n          result = result.concat(links);\r\n        }\r\n      });\r\n\r\n      return result;\r\n    }\r\n\r\n    if (item.checked) {\r\n      return [{\r\n        item,\r\n        parent\r\n      }];\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\r\n  private currentDownlines: DownlineTreeviewItem[] = [];\r\n  private parser = new DownlineTreeviewEventParser();\r\n\r\n  getSelectedChange(component: TreeviewComponent): any[] {\r\n    const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\r\n    if (this.currentDownlines.length === 0) {\r\n      this.currentDownlines = newDownlines;\r\n    } else {\r\n      const intersectDownlines: DownlineTreeviewItem[] = [];\r\n      this.currentDownlines.forEach(downline => {\r\n        let foundIndex = -1;\r\n        const length = newDownlines.length;\r\n        for (let i = 0; i < length; i++) {\r\n          if (downline.item.value === newDownlines[i].item.value) {\r\n            foundIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (foundIndex !== -1) {\r\n          intersectDownlines.push(newDownlines[foundIndex]);\r\n          newDownlines.splice(foundIndex, 1);\r\n        }\r\n      });\r\n\r\n      this.currentDownlines = intersectDownlines.concat(newDownlines);\r\n    }\r\n\r\n    return this.currentDownlines;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef, OnInit } from '@angular/core';\r\nimport { isNil, includes } from 'lodash';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem, TreeviewSelection } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\nimport { TreeviewHelper } from '../../helpers/treeview-helper';\r\nimport { TreeviewEventParser } from '../../helpers/treeview-event-parser';\r\n\r\nclass FilterTreeviewItem extends TreeviewItem {\r\n  private readonly refItem: TreeviewItem;\r\n  constructor(item: TreeviewItem) {\r\n    super({\r\n      text: item.text,\r\n      value: item.value,\r\n      disabled: item.disabled,\r\n      checked: item.checked,\r\n      collapsed: item.collapsed,\r\n      children: item.children\r\n    });\r\n    this.refItem = item;\r\n  }\r\n\r\n  updateRefChecked(): void {\r\n    this.children.forEach(child => {\r\n      if (child instanceof FilterTreeviewItem) {\r\n        child.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    let refChecked = this.checked;\r\n    if (refChecked) {\r\n      for (const refChild of this.refItem.children) {\r\n        if (!refChild.checked) {\r\n          refChecked = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.refItem.checked = refChecked;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'ngx-treeview',\r\n  templateUrl: './treeview.component.html',\r\n  styleUrls: ['./treeview.component.scss']\r\n})\r\nexport class TreeviewComponent implements OnChanges, OnInit {\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>();\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  headerTemplateContext: TreeviewHeaderTemplateContext;\r\n  allItem: TreeviewItem;\r\n  filterText = '';\r\n  filterItems: TreeviewItem[];\r\n  selection: TreeviewSelection;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig,\r\n    private eventParser: TreeviewEventParser\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n    this.allItem = new TreeviewItem({ text: 'All', value: undefined });\r\n  }\r\n\r\n  get hasFilterItems(): boolean {\r\n    return !isNil(this.filterItems) && this.filterItems.length > 0;\r\n  }\r\n\r\n  get maxHeight(): string {\r\n    return `${this.config.maxHeight}`;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.createHeaderTemplateContext();\r\n    this.generateSelection();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const itemsSimpleChange = changes.items;\r\n    if (!isNil(itemsSimpleChange) && !isNil(this.items)) {\r\n      this.updateFilterItems();\r\n      this.updateCollapsedOfAll();\r\n      this.raiseSelectedChange();\r\n    }\r\n  }\r\n\r\n  onAllCollapseExpand(): void {\r\n    this.allItem.collapsed = !this.allItem.collapsed;\r\n    this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\r\n  }\r\n\r\n  onFilterTextChange(text: string): void {\r\n    this.filterText = text;\r\n    this.filterChange.emit(text);\r\n    this.updateFilterItems();\r\n  }\r\n\r\n  onAllCheckedChange(): void {\r\n    const checked = this.allItem.checked;\r\n    this.filterItems.forEach(item => {\r\n      item.setCheckedRecursive(checked);\r\n      if (item instanceof FilterTreeviewItem) {\r\n        item.updateRefChecked();\r\n      }\r\n    });\r\n\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  onItemCheckedChange(item: TreeviewItem, checked: boolean): void {\r\n    if (item instanceof FilterTreeviewItem) {\r\n      item.updateRefChecked();\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n    this.raiseSelectedChange();\r\n  }\r\n\r\n  raiseSelectedChange(): void {\r\n    this.generateSelection();\r\n    const values = this.eventParser.getSelectedChange(this);\r\n    setTimeout(() => {\r\n      this.selectedChange.emit(values);\r\n    });\r\n  }\r\n\r\n  private createHeaderTemplateContext(): void {\r\n    this.headerTemplateContext = {\r\n      config: this.config,\r\n      item: this.allItem,\r\n      onCheckedChange: () => this.onAllCheckedChange(),\r\n      onCollapseExpand: () => this.onAllCollapseExpand(),\r\n      onFilterTextChange: (text) => this.onFilterTextChange(text)\r\n    };\r\n  }\r\n\r\n  private generateSelection(): void {\r\n    let checkedItems: TreeviewItem[] = [];\r\n    let uncheckedItems: TreeviewItem[] = [];\r\n    if (!isNil(this.items)) {\r\n      const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\r\n      checkedItems = selection.checked;\r\n      uncheckedItems = selection.unchecked;\r\n    }\r\n\r\n    this.selection = {\r\n      checkedItems,\r\n      uncheckedItems\r\n    };\r\n  }\r\n\r\n  private updateFilterItems(): void {\r\n    if (this.filterText !== '') {\r\n      const filterItems: TreeviewItem[] = [];\r\n      const filterText = this.filterText.toLowerCase();\r\n      this.items.forEach(item => {\r\n        const newItem = this.filterItem(item, filterText);\r\n        if (!isNil(newItem)) {\r\n          filterItems.push(newItem);\r\n        }\r\n      });\r\n      this.filterItems = filterItems;\r\n    } else {\r\n      this.filterItems = this.items;\r\n    }\r\n\r\n    this.updateCheckedOfAll();\r\n  }\r\n\r\n  private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\r\n    const isMatch = includes(item.text.toLowerCase(), filterText);\r\n    if (isMatch) {\r\n      return item;\r\n    } else {\r\n      if (!isNil(item.children)) {\r\n        const children: TreeviewItem[] = [];\r\n        item.children.forEach(child => {\r\n          const newChild = this.filterItem(child, filterText);\r\n          if (!isNil(newChild)) {\r\n            children.push(newChild);\r\n          }\r\n        });\r\n        if (children.length > 0) {\r\n          const newItem = new FilterTreeviewItem(item);\r\n          newItem.collapsed = false;\r\n          newItem.children = children;\r\n          return newItem;\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private updateCheckedOfAll(): void {\r\n    let itemChecked: boolean = null;\r\n    for (const filterItem of this.filterItems) {\r\n      if (itemChecked === null) {\r\n        itemChecked = filterItem.checked;\r\n      } else if (itemChecked !== filterItem.checked) {\r\n        itemChecked = undefined;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (itemChecked === null) {\r\n      itemChecked = false;\r\n    }\r\n\r\n    this.allItem.checked = itemChecked;\r\n  }\r\n\r\n  private updateCollapsedOfAll(): void {\r\n    let hasItemExpanded = false;\r\n    for (const filterItem of this.filterItems) {\r\n      if (!filterItem.collapsed) {\r\n        hasItemExpanded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.allItem.collapsed = !hasItemExpanded;\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';\r\nimport { TreeviewI18n } from '../../models/treeview-i18n';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewComponent } from '../treeview/treeview.component';\r\nimport { TreeviewHeaderTemplateContext } from '../../models/treeview-header-template-context';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-dropdown-treeview',\r\n  templateUrl: './dropdown-treeview.component.html',\r\n  styleUrls: ['./dropdown-treeview.component.scss']\r\n})\r\nexport class DropdownTreeviewComponent {\r\n  @Input() buttonClass = 'btn-outline-secondary';\r\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\r\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() items: TreeviewItem[];\r\n  @Input() config: TreeviewConfig;\r\n  @Output() selectedChange = new EventEmitter<any[]>(true);\r\n  @Output() filterChange = new EventEmitter<string>();\r\n  @ViewChild(TreeviewComponent, { static: false }) treeviewComponent: TreeviewComponent;\r\n  buttonLabel: string;\r\n\r\n  constructor(\r\n    public i18n: TreeviewI18n,\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onSelectedChange(values: any[]): void {\r\n    this.buttonLabel = this.i18n.getText(this.treeviewComponent.selection);\r\n    this.selectedChange.emit(values);\r\n  }\r\n\r\n  onFilterChange(text: string): void {\r\n    this.filterChange.emit(text);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../../models/treeview-item';\r\nimport { TreeviewConfig } from '../../models/treeview-config';\r\nimport { TreeviewItemTemplateContext } from '../../models/treeview-item-template-context';\r\n\r\n@Component({\r\n  selector: 'ngx-treeview-item',\r\n  templateUrl: './treeview-item.component.html',\r\n  styleUrls: ['./treeview-item.component.scss']\r\n})\r\nexport class TreeviewItemComponent {\r\n  @Input() config: TreeviewConfig;\r\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\r\n  @Input() item: TreeviewItem;\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n\r\n  constructor(\r\n    private defaultConfig: TreeviewConfig\r\n  ) {\r\n    this.config = this.defaultConfig;\r\n  }\r\n\r\n  onCollapseExpand = () => {\r\n    this.item.collapsed = !this.item.collapsed;\r\n  }\r\n\r\n  onCheckedChange = () => {\r\n    const checked = this.item.checked;\r\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\r\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\r\n    }\r\n    this.checkedChange.emit(checked);\r\n  }\r\n\r\n  onChildCheckedChange(child: TreeviewItem, checked: boolean): void {\r\n    if (!this.config.decoupleChildFromParent) {\r\n      let itemChecked: boolean = null;\r\n      for (const childItem of this.item.children) {\r\n        if (itemChecked === null) {\r\n          itemChecked = childItem.checked;\r\n        } else if (itemChecked !== childItem.checked) {\r\n          itemChecked = undefined;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (itemChecked === null) {\r\n        itemChecked = false;\r\n      }\r\n\r\n      if (this.item.checked !== itemChecked) {\r\n        this.item.checked = itemChecked;\r\n      }\r\n\r\n    }\r\n\r\n    this.checkedChange.emit(checked);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from '../models/treeview-item';\r\n\r\n@Pipe({\r\n  name: 'ngxTreeview'\r\n})\r\nexport class TreeviewPipe implements PipeTransform {\r\n  transform(objects: any[], textField: string): TreeviewItem[] {\r\n    if (isNil(objects)) {\r\n      return undefined;\r\n    }\r\n\r\n    return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DropdownDirective } from './directives/dropdown.directive';\r\nimport { DropdownMenuDirective } from './directives/dropdown-menu.directive';\r\nimport { DropdownToggleDirective } from './directives/dropdown-toggle.directive';\r\nimport { DropdownTreeviewComponent } from './components/dropdown-treeview/dropdown-treeview.component';\r\nimport { TreeviewComponent } from './components/treeview/treeview.component';\r\nimport { TreeviewItemComponent } from './components/treeview-item/treeview-item.component';\r\nimport { TreeviewPipe } from './pipes/treeview.pipe';\r\nimport { TreeviewI18n, DefaultTreeviewI18n } from './models/treeview-i18n';\r\nimport { TreeviewConfig } from './models/treeview-config';\r\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './helpers/treeview-event-parser';\r\n\r\n@NgModule({\r\n  imports: [\r\n    FormsModule,\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    TreeviewComponent,\r\n    TreeviewItemComponent,\r\n    TreeviewPipe,\r\n    DropdownDirective,\r\n    DropdownMenuDirective,\r\n    DropdownToggleDirective,\r\n    DropdownTreeviewComponent\r\n  ], exports: [\r\n    TreeviewComponent,\r\n    TreeviewPipe,\r\n    DropdownTreeviewComponent\r\n  ]\r\n})\r\nexport class TreeviewModule {\r\n  static forRoot(): ModuleWithProviders<TreeviewModule> {\r\n    return {\r\n      ngModule: TreeviewModule,\r\n      providers: [\r\n        TreeviewConfig,\r\n        { provide: TreeviewI18n, useClass: DefaultTreeviewI18n },\r\n        { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}