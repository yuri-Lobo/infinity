/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Directive, Host, Injector, Input, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SwalPortalTargets } from './swal-portal-targets.service';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalComponent } from './swal.component';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * A structural directive that lets you use Angular templates inside of SweetAlerts.
 * There are different targetable zones provided by {\@link SwalPortalTargets}: title, content, confirmButton, etc, but
 * you can also make your own target by implementing {\@link SwalPortalTarget} and giving it to this directive.
 * The default target is the alert text content zone.
 *
 * Usage in your component's TypeScript (if you use another target than {\@link SwalPortalTargets.content}):
 *
 * \@Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPortalTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPortal [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPortal="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
var SwalPortalDirective = /** @class */ (function () {
    function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
        this.destroyed = new Subject();
    }
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     */
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     * @return {?}
     */
    SwalPortalDirective.prototype.ngOnInit = /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     * @return {?}
     */
    function () {
        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.
        this.target = this.target || this.swalTargets.content;
        //=> Apply the options provided by the target definition
        void this.swalComponent.update(this.target.options);
        //=> Subscribe to a few hooks frm the parent SwalComponent.
        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));
        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));
        this.swalComponent.afterClose.pipe(takeUntil(this.destroyed)).subscribe(this.afterCloseHook.bind(this));
    };
    /**
     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     */
    /**
     * Signal any {\@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     * @return {?}
     */
    SwalPortalDirective.prototype.ngOnDestroy = /**
     * Signal any {\@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     * @return {?}
     */
    function () {
        this.destroyed.next();
    };
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     */
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {\@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.renderHook = /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {\@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var swal, targetEl;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //=> Ensure the portal component is created
                        if (!this.portalComponentRef) {
                            this.portalComponentRef = this.createPortalComponent();
                        }
                        //=> SweetAlert2 created the modal or just erased all of our content, so we need to install/reinstall it.
                        // Swal.update() is synchronous, this observable too, and mountComponentOnTarget too (the promise inside
                        // this function is already resolved at this point), so the whole process of re-rendering and re-mounting
                        // the portal component is fully synchronous, causing no blinks in the modal contents.
                        return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        //=> Find target element
                        targetEl = (/** @type {?} */ (this.target)).element(swal);
                        //=> Replace target's contents with our component
                        // https://jsperf.com/innerhtml-vs-removechild/15
                        while (targetEl.firstChild) {
                            targetEl.removeChild(targetEl.firstChild);
                        }
                        targetEl.appendChild(this.portalComponentRef.location.nativeElement);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     */
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.beforeOpenHook = /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     * @private
     * @return {?}
     */
    function () {
        if (!this.portalComponentRef)
            return;
        //=> Make the Angular app aware of that detached view so rendering and change detection can happen
        this.app.attachView(this.portalComponentRef.hostView);
    };
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     */
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.afterCloseHook = /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     * @private
     * @return {?}
     */
    function () {
        if (!this.portalComponentRef)
            return;
        //=> Detach the portal component from the app and destroy it
        this.app.detachView(this.portalComponentRef.hostView);
        this.portalComponentRef.destroy();
        this.portalComponentRef = void 0;
    };
    /**
     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
     */
    /**
     * Creates the {\@link SwalPortalComponent} and gives it the customer's template ref.
     * @private
     * @return {?}
     */
    SwalPortalDirective.prototype.createPortalComponent = /**
     * Creates the {\@link SwalPortalComponent} and gives it the customer's template ref.
     * @private
     * @return {?}
     */
    function () {
        //=> Create the SwalPortalComponent that will hold our content
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(SwalPortalComponent);
        // Yes, we do not use the third argument that would directly use the target as the component's view
        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)
        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be
        // able to restore it at any moment, ie. after the modal has been re-rendered.
        /** @type {?} */
        var componentRef = factory.create(this.injector, []);
        //=> Apply the consumer's template on the component
        componentRef.instance.template = this.templateRef;
        return componentRef;
    };
    SwalPortalDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swalPortal]'
                },] }
    ];
    /** @nocollapse */
    SwalPortalDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: TemplateRef },
        { type: SweetAlert2LoaderService },
        { type: SwalPortalTargets },
        { type: SwalComponent, decorators: [{ type: Host }] }
    ]; };
    SwalPortalDirective.propDecorators = {
        target: [{ type: Input, args: ['swalPortal',] }]
    };
    return SwalPortalDirective;
}());
export { SwalPortalDirective };
if (false) {
    /**
     * Takes a portal target or nothing (then it will target the text content zone by default).
     *
     * See the {\@link SwalPortalTargets} service to see the available targets.
     * See the class doc block for more informations.
     * @type {?}
     */
    SwalPortalDirective.prototype.target;
    /**
     * Holds the component reference of the controlled SwalPortalComponent to destroy it when no longer needed.
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.portalComponentRef;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.destroyed;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.app;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.sweetAlert2Loader;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.swalTargets;
    /**
     * @type {?}
     * @private
     */
    SwalPortalDirective.prototype.swalComponent;
}
//# sourceMappingURL=data:application/json;base64,