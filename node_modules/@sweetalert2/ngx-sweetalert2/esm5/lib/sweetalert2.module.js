/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { dismissOnDestroyToken, swalProviderToken } from './di';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalPortalDirective } from './swal-portal.directive';
import { SwalComponent } from './swal.component';
import { SwalDirective } from './swal.directive';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * @record
 */
export function Sweetalert2ModuleConfig() { }
if (false) {
    /** @type {?|undefined} */
    Sweetalert2ModuleConfig.prototype.provideSwal;
    /** @type {?|undefined} */
    Sweetalert2ModuleConfig.prototype.dismissOnDestroy;
}
/**
 * @return {?}
 */
export function provideDefaultSwal() {
    return import('sweetalert2');
}
var SweetAlert2Module = /** @class */ (function () {
    function SweetAlert2Module() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    SweetAlert2Module.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: SweetAlert2Module,
            providers: [
                SweetAlert2LoaderService,
                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },
                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }
            ]
        };
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    SweetAlert2Module.forChild = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: SweetAlert2Module,
            providers: tslib_1.__spread(options.provideSwal ? [
                SweetAlert2LoaderService,
                { provide: swalProviderToken, useValue: options.provideSwal }
            ] : [], options.dismissOnDestroy !== undefined ? [
                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }
            ] : [])
        };
    };
    SweetAlert2Module.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent
                    ],
                    imports: [
                        CommonModule
                    ],
                    exports: [
                        SwalComponent, SwalPortalDirective, SwalDirective
                    ],
                    entryComponents: [
                        SwalComponent, SwalPortalComponent
                    ]
                },] }
    ];
    return SweetAlert2Module;
}());
export { SweetAlert2Module };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2VldGFsZXJ0Mi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFnQix3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7O0FBRXRGLDZDQUdDOzs7SUFGRyw4Q0FBMkI7O0lBQzNCLG1EQUEyQjs7Ozs7QUFHL0IsTUFBTSxVQUFVLGtCQUFrQjtJQUM5QixPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQ7SUFBQTtJQXdDQSxDQUFDOzs7OztJQXpCaUIseUJBQU87Ozs7SUFBckIsVUFBc0IsT0FBcUM7UUFBckMsd0JBQUEsRUFBQSxZQUFxQztRQUN2RCxPQUFPO1lBQ0gsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1Asd0JBQXdCO2dCQUN4QixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsSUFBSSxrQkFBa0IsRUFBRTtnQkFDbkYsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7YUFDakY7U0FDSixDQUFDO0lBQ04sQ0FBQzs7Ozs7SUFFYSwwQkFBUTs7OztJQUF0QixVQUF1QixPQUFxQztRQUFyQyx3QkFBQSxFQUFBLFlBQXFDO1FBQ3hELE9BQU87WUFDSCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsbUJBQ0YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLHdCQUF3QjtnQkFDeEIsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUU7YUFDaEUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUNILE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFO2FBQ3pFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDVDtTQUNKLENBQUM7SUFDTixDQUFDOztnQkF2Q0osUUFBUSxTQUFDO29CQUNOLFlBQVksRUFBRTt3QkFDVixhQUFhLEVBQUUsYUFBYSxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQjtxQkFDekU7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLFlBQVk7cUJBQ2Y7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxhQUFhO3FCQUNwRDtvQkFDRCxlQUFlLEVBQUU7d0JBQ2IsYUFBYSxFQUFFLG1CQUFtQjtxQkFDckM7aUJBQ0o7O0lBMkJELHdCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0ExQlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBkaXNtaXNzT25EZXN0cm95VG9rZW4sIHN3YWxQcm92aWRlclRva2VuIH0gZnJvbSAnLi9kaSc7XG5pbXBvcnQgeyBTd2FsUG9ydGFsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLXBvcnRhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dhbFBvcnRhbERpcmVjdGl2ZSB9IGZyb20gJy4vc3dhbC1wb3J0YWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN3YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwuY29tcG9uZW50JztcbmltcG9ydCB7IFN3YWxEaXJlY3RpdmUgfSBmcm9tICcuL3N3YWwuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN3YWxQcm92aWRlciwgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3dlZXRhbGVydDJNb2R1bGVDb25maWcge1xuICAgIHByb3ZpZGVTd2FsPzogU3dhbFByb3ZpZGVyO1xuICAgIGRpc21pc3NPbkRlc3Ryb3k/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZURlZmF1bHRTd2FsKCkge1xuICAgIHJldHVybiBpbXBvcnQoJ3N3ZWV0YWxlcnQyJyk7XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXG4gICAgICAgIFN3YWxEaXJlY3RpdmUsIFN3YWxDb21wb25lbnQsIFN3YWxQb3J0YWxEaXJlY3RpdmUsIFN3YWxQb3J0YWxDb21wb25lbnRcbiAgICBdLFxuICAgIGltcG9ydHM6IFtcbiAgICAgICAgQ29tbW9uTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFN3YWxDb21wb25lbnQsIFN3YWxQb3J0YWxEaXJlY3RpdmUsIFN3YWxEaXJlY3RpdmVcbiAgICBdLFxuICAgIGVudHJ5Q29tcG9uZW50czogW1xuICAgICAgICBTd2FsQ29tcG9uZW50LCBTd2FsUG9ydGFsQ29tcG9uZW50XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBTd2VldEFsZXJ0Mk1vZHVsZSB7XG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KG9wdGlvbnM6IFN3ZWV0YWxlcnQyTW9kdWxlQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBTd2VldEFsZXJ0Mk1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIFN3ZWV0QWxlcnQyTG9hZGVyU2VydmljZSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IHN3YWxQcm92aWRlclRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5wcm92aWRlU3dhbCB8fCBwcm92aWRlRGVmYXVsdFN3YWwgfSxcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSB8fCB0cnVlIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGZvckNoaWxkKG9wdGlvbnM6IFN3ZWV0YWxlcnQyTW9kdWxlQ29uZmlnID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5nTW9kdWxlOiBTd2VldEFsZXJ0Mk1vZHVsZSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMucHJvdmlkZVN3YWwgPyBbXG4gICAgICAgICAgICAgICAgICAgIFN3ZWV0QWxlcnQyTG9hZGVyU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBzd2FsUHJvdmlkZXJUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMucHJvdmlkZVN3YWwgfVxuICAgICAgICAgICAgICAgIF0gOiBbXSxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLmRpc21pc3NPbkRlc3Ryb3kgIT09IHVuZGVmaW5lZCA/IFtcbiAgICAgICAgICAgICAgICAgICAgeyBwcm92aWRlOiBkaXNtaXNzT25EZXN0cm95VG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLmRpc21pc3NPbkRlc3Ryb3kgfVxuICAgICAgICAgICAgICAgIF0gOiBbXVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==