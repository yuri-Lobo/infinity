/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { dismissOnDestroyToken, swalProviderToken } from './di';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalPortalDirective } from './swal-portal.directive';
import { SwalComponent } from './swal.component';
import { SwalDirective } from './swal.directive';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * @record
 */
export function Sweetalert2ModuleConfig() { }
if (false) {
    /** @type {?|undefined} */
    Sweetalert2ModuleConfig.prototype.provideSwal;
    /** @type {?|undefined} */
    Sweetalert2ModuleConfig.prototype.dismissOnDestroy;
}
/**
 * @return {?}
 */
export function provideDefaultSwal() {
    return import('sweetalert2');
}
export class SweetAlert2Module {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options = {}) {
        return {
            ngModule: SweetAlert2Module,
            providers: [
                SweetAlert2LoaderService,
                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },
                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }
            ]
        };
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    static forChild(options = {}) {
        return {
            ngModule: SweetAlert2Module,
            providers: [
                ...options.provideSwal ? [
                    SweetAlert2LoaderService,
                    { provide: swalProviderToken, useValue: options.provideSwal }
                ] : [],
                ...options.dismissOnDestroy !== undefined ? [
                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }
                ] : []
            ]
        };
    }
}
SweetAlert2Module.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    SwalComponent, SwalPortalDirective, SwalDirective
                ],
                entryComponents: [
                    SwalComponent, SwalPortalComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2VldGFsZXJ0Mi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQWdCLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFFdEYsNkNBR0M7OztJQUZHLDhDQUEyQjs7SUFDM0IsbURBQTJCOzs7OztBQUcvQixNQUFNLFVBQVUsa0JBQWtCO0lBQzlCLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFnQkQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFDbkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFtQyxFQUFFO1FBQ3ZELE9BQU87WUFDSCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsRUFBRTtnQkFDUCx3QkFBd0I7Z0JBQ3hCLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxJQUFJLGtCQUFrQixFQUFFO2dCQUNuRixFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTthQUNqRjtTQUNKLENBQUM7SUFDTixDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBbUMsRUFBRTtRQUN4RCxPQUFPO1lBQ0gsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1AsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDckIsd0JBQXdCO29CQUN4QixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRTtpQkFDaEUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDTixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUN4QyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFO2lCQUN6RSxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQ1Q7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBdkNKLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUU7b0JBQ1YsYUFBYSxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUI7aUJBQ3pFO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxZQUFZO2lCQUNmO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxhQUFhLEVBQUUsbUJBQW1CLEVBQUUsYUFBYTtpQkFDcEQ7Z0JBQ0QsZUFBZSxFQUFFO29CQUNiLGFBQWEsRUFBRSxtQkFBbUI7aUJBQ3JDO2FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgc3dhbFByb3ZpZGVyVG9rZW4gfSBmcm9tICcuL2RpJztcbmltcG9ydCB7IFN3YWxQb3J0YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwtcG9ydGFsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTd2FsUG9ydGFsRGlyZWN0aXZlIH0gZnJvbSAnLi9zd2FsLXBvcnRhbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3dhbENvbXBvbmVudCB9IGZyb20gJy4vc3dhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3dhbERpcmVjdGl2ZSB9IGZyb20gJy4vc3dhbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3dhbFByb3ZpZGVyLCBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2UgfSBmcm9tICcuL3N3ZWV0YWxlcnQyLWxvYWRlci5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2VldGFsZXJ0Mk1vZHVsZUNvbmZpZyB7XG4gICAgcHJvdmlkZVN3YWw/OiBTd2FsUHJvdmlkZXI7XG4gICAgZGlzbWlzc09uRGVzdHJveT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRGVmYXVsdFN3YWwoKSB7XG4gICAgcmV0dXJuIGltcG9ydCgnc3dlZXRhbGVydDInKTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgU3dhbERpcmVjdGl2ZSwgU3dhbENvbXBvbmVudCwgU3dhbFBvcnRhbERpcmVjdGl2ZSwgU3dhbFBvcnRhbENvbXBvbmVudFxuICAgIF0sXG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGVcbiAgICBdLFxuICAgIGV4cG9ydHM6IFtcbiAgICAgICAgU3dhbENvbXBvbmVudCwgU3dhbFBvcnRhbERpcmVjdGl2ZSwgU3dhbERpcmVjdGl2ZVxuICAgIF0sXG4gICAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgICAgIFN3YWxDb21wb25lbnQsIFN3YWxQb3J0YWxDb21wb25lbnRcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFN3ZWV0QWxlcnQyTW9kdWxlIHtcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3Qob3B0aW9uczogU3dlZXRhbGVydDJNb2R1bGVDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFN3ZWV0QWxlcnQyTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogc3dhbFByb3ZpZGVyVG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLnByb3ZpZGVTd2FsIHx8IHByb3ZpZGVEZWZhdWx0U3dhbCB9LFxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogZGlzbWlzc09uRGVzdHJveVRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5kaXNtaXNzT25EZXN0cm95IHx8IHRydWUgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZm9yQ2hpbGQob3B0aW9uczogU3dlZXRhbGVydDJNb2R1bGVDb25maWcgPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFN3ZWV0QWxlcnQyTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5wcm92aWRlU3dhbCA/IFtcbiAgICAgICAgICAgICAgICAgICAgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IHN3YWxQcm92aWRlclRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5wcm92aWRlU3dhbCB9XG4gICAgICAgICAgICAgICAgXSA6IFtdLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSAhPT0gdW5kZWZpbmVkID8gW1xuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSB9XG4gICAgICAgICAgICAgICAgXSA6IFtdXG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxufVxuIl19