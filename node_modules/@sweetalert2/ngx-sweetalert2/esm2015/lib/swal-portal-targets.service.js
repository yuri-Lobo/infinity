/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function SwalPortalTarget() { }
if (false) {
    /** @type {?|undefined} */
    SwalPortalTarget.prototype.options;
    /**
     * @param {?} swal
     * @return {?}
     */
    SwalPortalTarget.prototype.element = function (swal) { };
}
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
export class SwalPortalTargets {
    constructor() {
        /**
         * Targets the modal close button block contents.
         */
        this.closeButton = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getCloseButton()),
            options: { showCloseButton: true }
        };
        /**
         * Targets the modal title block contents.
         */
        this.title = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getTitle()),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { title: ' ' }
        };
        /**
         * Targets the modal text block contents (that is another block inside the first content block, so you can still
         * use other modal features like Swal inputs, that are situated inside that parent content block).
         */
        this.content = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => (/** @type {?} */ (swal.getContent().querySelector('#swal2-content')))),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { text: ' ' }
        };
        /**
         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
         * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
         *     target, do not update the modal via <swal> \@Inputs while the modal is open, or you'll get an error.
         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
         *     performance of everyone, for a relatively rare use case.
         */
        this.actions = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getActions()),
            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.
            options: { showConfirmButton: true }
        };
        /**
         * Targets the confirm button contents, replacing the text inside it (not the button itself)
         */
        this.confirmButton = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getConfirmButton()),
            options: { showConfirmButton: true }
        };
        /**
         * Targets the cancel button contents, replacing the text inside it (not the button itself)
         */
        this.cancelButton = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getCancelButton()),
            options: { showCancelButton: true }
        };
        /**
         * Targets the modal footer contents.
         */
        this.footer = {
            element: (/**
             * @param {?} swal
             * @return {?}
             */
            swal => swal.getFooter()),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { footer: ' ' }
        };
    }
}
SwalPortalTargets.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ SwalPortalTargets.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: "root" });
if (false) {
    /**
     * Targets the modal close button block contents.
     * @type {?}
     */
    SwalPortalTargets.prototype.closeButton;
    /**
     * Targets the modal title block contents.
     * @type {?}
     */
    SwalPortalTargets.prototype.title;
    /**
     * Targets the modal text block contents (that is another block inside the first content block, so you can still
     * use other modal features like Swal inputs, that are situated inside that parent content block).
     * @type {?}
     */
    SwalPortalTargets.prototype.content;
    /**
     * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
     * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
     *     target, do not update the modal via <swal> \@Inputs while the modal is open, or you'll get an error.
     *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
     *     performance of everyone, for a relatively rare use case.
     * @type {?}
     */
    SwalPortalTargets.prototype.actions;
    /**
     * Targets the confirm button contents, replacing the text inside it (not the button itself)
     * @type {?}
     */
    SwalPortalTargets.prototype.confirmButton;
    /**
     * Targets the cancel button contents, replacing the text inside it (not the button itself)
     * @type {?}
     */
    SwalPortalTargets.prototype.cancelButton;
    /**
     * Targets the modal footer contents.
     * @type {?}
     */
    SwalPortalTargets.prototype.footer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2FsLXBvcnRhbC10YXJnZXRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7O0FBRzNDLHNDQUdDOzs7SUFGRyxtQ0FBNEI7Ozs7O0lBQzVCLHlEQUF3Qzs7Ozs7OztBQVM1QyxNQUFNLE9BQU8saUJBQWlCO0lBRDlCOzs7O1FBS29CLGdCQUFXLEdBQXFCO1lBQzVDLE9BQU87Ozs7WUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUN0QyxPQUFPLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFO1NBQ3JDLENBQUM7Ozs7UUFLYyxVQUFLLEdBQXFCO1lBQ3RDLE9BQU87Ozs7WUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTs7WUFFaEMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUMxQixDQUFDOzs7OztRQU1jLFlBQU8sR0FBcUI7WUFDeEMsT0FBTzs7OztZQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQUEsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFlLENBQUE7O1lBRWpGLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7U0FDekIsQ0FBQzs7Ozs7Ozs7UUFTYyxZQUFPLEdBQXFCO1lBQ3hDLE9BQU87Ozs7WUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTs7WUFFbEMsT0FBTyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFO1NBQ3ZDLENBQUM7Ozs7UUFLYyxrQkFBYSxHQUFxQjtZQUM5QyxPQUFPOzs7O1lBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtZQUN4QyxPQUFPLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUU7U0FDdkMsQ0FBQzs7OztRQUtjLGlCQUFZLEdBQXFCO1lBQzdDLE9BQU87Ozs7WUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtZQUN2QyxPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7U0FDdEMsQ0FBQzs7OztRQUtjLFdBQU0sR0FBcUI7WUFDdkMsT0FBTzs7OztZQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBOztZQUVqQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1NBQzNCLENBQUM7S0FDTDs7O1lBbEVBLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Ozs7O0lBSzlCLHdDQUdFOzs7OztJQUtGLGtDQUlFOzs7Ozs7SUFNRixvQ0FJRTs7Ozs7Ozs7O0lBU0Ysb0NBSUU7Ozs7O0lBS0YsMENBR0U7Ozs7O0lBS0YseUNBR0U7Ozs7O0lBS0YsbUNBSUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2FsUG9ydGFsVGFyZ2V0IHtcbiAgICBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnM7XG4gICAgZWxlbWVudChzd2FsOiB0eXBlb2YgU3dhbCk6IEhUTUxFbGVtZW50O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IG9mIHRhcmdldHMgZm9yIDxzd2FsPiBwb3J0YWxzICh1c2Ugd2l0aCAqc3dhbFBvcnRhbCBkaXJlY3RpdmUpLlxuICogV2UgbXVzdCB1c2UgdGh1bmtzIHRvIGFjY2VzcyB0aGUgU3dhbC4qIGZ1bmN0aW9ucyBsaXN0ZWQgYmVsb3csIGJlY2F1c2UgdGhleSBnZXQgY3JlYXRlZCBhZnRlciB0aGUgZmlyc3QgbW9kYWwgaXNcbiAqIHNob3duLCBzbyB0aGlzIG9iamVjdCBsZXRzIHVzIHJlZmVyZW5jZSB0aG9zZSBmdW5jdGlvbnMgc2FmZWx5IGFuZCBpbiBhIHN0YXRpY2FsbHktdHlwZWQgbWFubmVyLlxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFN3YWxQb3J0YWxUYXJnZXRzIHtcbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCBjbG9zZSBidXR0b24gYmxvY2sgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNsb3NlQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0Q2xvc2VCdXR0b24oKSxcbiAgICAgICAgb3B0aW9uczogeyBzaG93Q2xvc2VCdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCB0aXRsZSBibG9jayBjb250ZW50cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgdGl0bGU6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRUaXRsZSgpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyB0aXRsZTogJyAnIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgdGV4dCBibG9jayBjb250ZW50cyAodGhhdCBpcyBhbm90aGVyIGJsb2NrIGluc2lkZSB0aGUgZmlyc3QgY29udGVudCBibG9jaywgc28geW91IGNhbiBzdGlsbFxuICAgICAqIHVzZSBvdGhlciBtb2RhbCBmZWF0dXJlcyBsaWtlIFN3YWwgaW5wdXRzLCB0aGF0IGFyZSBzaXR1YXRlZCBpbnNpZGUgdGhhdCBwYXJlbnQgY29udGVudCBibG9jaykuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRlbnQ6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRDb250ZW50KCkucXVlcnlTZWxlY3RvcignI3N3YWwyLWNvbnRlbnQnKSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgLy8gRW1wdHkgdGV4dCB0aGF0IHdpbGwgbmV2ZXIgYmUgc2hvd24gYnV0IG5lY2Vzc2FyeSBzbyBTd2VldEFsZXJ0MiBtYWtlcyB0aGUgZGl2IHZpc2libGUuXG4gICAgICAgIG9wdGlvbnM6IHsgdGV4dDogJyAnIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgYWN0aW9ucyBibG9jayBjb250ZW50cywgd2hlcmUgYXJlIHRoZSBjb25maXJtIGFuZCBjYW5jZWwgYnV0dG9ucyBpbiBhIG5vcm1hbCB0aW1lLlxuICAgICAqIC8hXFwgV0FSTklORzogdXNpbmcgdGhpcyB0YXJnZXQgZGVzdHJveXMgc29tZSBvZiB0aGUgbmF0aXZlIFN3ZWV0QWxlcnQyIG1vZGFsJ3MgRE9NLCB0aGVyZWZvcmUsIGlmIHlvdSB1c2UgdGhpc1xuICAgICAqICAgICB0YXJnZXQsIGRvIG5vdCB1cGRhdGUgdGhlIG1vZGFsIHZpYSA8c3dhbD4gQElucHV0cyB3aGlsZSB0aGUgbW9kYWwgaXMgb3Blbiwgb3IgeW91J2xsIGdldCBhbiBlcnJvci5cbiAgICAgKiAgICAgV2UgY291bGQgd29ya2Fyb3VuZCB0aGF0IGluY29udmVuaWVudCBpbnNpZGUgdGhpcyBpbnRlZ3JhdGlvbiwgYnV0IHRoYXQnZCBiZSBkZXRyaW1lbnRhbCB0byBtZW1vcnkgYW5kXG4gICAgICogICAgIHBlcmZvcm1hbmNlIG9mIGV2ZXJ5b25lLCBmb3IgYSByZWxhdGl2ZWx5IHJhcmUgdXNlIGNhc2UuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGFjdGlvbnM6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRBY3Rpb25zKCksXG4gICAgICAgIC8vIFRoZSBidXR0b24gd2lsbCBuZXZlciBleGlzdCwgYnV0IFN3ZWV0QWxlcnQyIHNob3dzIHRoZSBhY3Rpb25zIGJsb2NrIG9ubHkgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGJ1dHRvbi5cbiAgICAgICAgb3B0aW9uczogeyBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGNvbmZpcm0gYnV0dG9uIGNvbnRlbnRzLCByZXBsYWNpbmcgdGhlIHRleHQgaW5zaWRlIGl0IChub3QgdGhlIGJ1dHRvbiBpdHNlbGYpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbmZpcm1CdXR0b246IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRDb25maXJtQnV0dG9uKCksXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0NvbmZpcm1CdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBjYW5jZWwgYnV0dG9uIGNvbnRlbnRzLCByZXBsYWNpbmcgdGhlIHRleHQgaW5zaWRlIGl0IChub3QgdGhlIGJ1dHRvbiBpdHNlbGYpXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbmNlbEJ1dHRvbjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldENhbmNlbEJ1dHRvbigpLFxuICAgICAgICBvcHRpb25zOiB7IHNob3dDYW5jZWxCdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCBmb290ZXIgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGZvb3RlcjogU3dhbFBvcnRhbFRhcmdldCA9IHtcbiAgICAgICAgZWxlbWVudDogc3dhbCA9PiBzd2FsLmdldEZvb3RlcigpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyBmb290ZXI6ICcgJyB9XG4gICAgfTtcbn1cbiJdfQ==