import { Select2 } from './select2.component';
export interface Select2Group {
    /** label of group */
    label: string;
    /** options list */
    options: Select2Option[];
    /** add classes  */
    classes?: string;
    /** template id  */
    templateId?: string;
    /** template data  */
    data?: any;
}
export interface Select2Option {
    /** value  */
    value: Select2Value;
    /** label of option */
    label: string;
    /** no selectable is disabled */
    disabled?: boolean;
    /** for identification */
    id?: string;
    /** add classes  */
    classes?: string;
    /** template id  */
    templateId?: string;
    /** template data  */
    data?: any;
    /** hide this option */
    hide?: boolean;
}
export declare type Select2Value = string | number | boolean;
export declare type Select2UpdateValue = Select2Value | Select2Value[];
export declare type Select2Data = (Select2Group | Select2Option)[];
export interface Select2UpdateEvent<U extends Select2UpdateValue = Select2Value> {
    component: Select2;
    value: U;
    options: Select2Option[];
}
export interface Select2SearchEvent<U extends Select2UpdateValue = Select2Value> {
    component: Select2;
    value: U;
    search: string;
}
export interface Select2RemoveEvent<U extends Select2UpdateValue = Select2Value> {
    component: Select2;
    value: U;
    removedOption: Select2Option;
}
export interface Select2ScrollEvent {
    component: Select2;
    way: 'up' | 'down';
    search: string;
}
export declare const timeout = 200;
export declare const unicodePatterns: {
    l: string;
    s: RegExp;
}[];
export declare class Select2Utils {
    static getOptionByValue(data: Select2Data, value: Select2Value | null | undefined): Select2Option;
    static getOptionsByValue(data: Select2Data, value: Select2UpdateValue | null | undefined, multiple: boolean | null | undefined): Select2Option | Select2Option[];
    static getFirstAvailableOption(data: Select2Data): Select2Value;
    private static getOptionsCount;
    static valueIsNotInFilteredData(filteredData: Select2Data, value: Select2Value | null | undefined): boolean;
    static getPreviousOption(filteredData: Select2Data, hoveringValue: Select2Value | null | undefined): Select2Option;
    static getNextOption(filteredData: Select2Data, hoveringValue: Select2Value | null | undefined): Select2Option;
    private static isNullOrUndefined;
    private static containSearchText;
    private static protectPattern;
    private static formatSansUnicode;
    private static formatPattern;
    static getFilteredData(data: Select2Data, searchText: string | null, editPattern?: (str: string) => string): Select2Data;
    static getFilteredSelectedData(data: Select2Data, selectedOptions: Select2Option | Select2Option[] | null): Select2Data;
    static isSearchboxHiddex(data: Select2Data, minCountForSearch?: number | string): boolean;
    static isSelected(options: Select2Option | Select2Option[] | null, option: Select2Option, multiple: boolean | null | undefined): "true" | "false";
    static removeSelection(options: Select2Option | Select2Option[] | null, option: Select2Option): void;
}
