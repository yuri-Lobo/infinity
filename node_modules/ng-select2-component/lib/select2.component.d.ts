import { AfterViewInit, ChangeDetectorRef, DoCheck, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { Select2Data, Select2Group, Select2Option, Select2RemoveEvent, Select2ScrollEvent, Select2SearchEvent, Select2UpdateEvent, Select2UpdateValue } from './select2-utils';
export declare class Select2 implements ControlValueAccessor, OnInit, OnDestroy, DoCheck, AfterViewInit {
    private _changeDetectorRef;
    private _parentForm;
    private _parentFormGroup;
    _control: NgControl;
    /** data of options & optiongrps */
    data: Select2Data;
    minCharForSearch: number;
    displaySearchStatus: 'default' | 'hidden' | 'always';
    placeholder: string;
    customSearchEnabled: boolean;
    limitSelection: number;
    listPosition: 'above' | 'below';
    multiple: any;
    /** use the material style */
    material: any;
    /** use no style */
    noStyle: any;
    /** infinite scroll distance */
    infiniteScrollDistance: number;
    /** infinite scroll distance */
    infiniteScrollThrottle: number;
    /** infinite scroll activated */
    infiniteScroll: any;
    /** use it for change the pattern of the filter search */
    editPattern: (str: string) => string;
    /** template for formating */
    templates: (TemplateRef<any> | {
        [key: string]: TemplateRef<any>;
    });
    /** the max height of the results container when opening the select */
    resultMaxHeight: string;
    update: EventEmitter<Select2UpdateEvent<Select2UpdateValue>>;
    open: EventEmitter<Select2>;
    close: EventEmitter<Select2>;
    focus: EventEmitter<Select2>;
    blur: EventEmitter<Select2>;
    search: EventEmitter<Select2SearchEvent<Select2UpdateValue>>;
    scroll: EventEmitter<Select2ScrollEvent>;
    removeOption: EventEmitter<Select2RemoveEvent<Select2UpdateValue>>;
    option: Select2Option | Select2Option[] | null;
    isOpen: boolean;
    searchStyle: string;
    /** Whether the element is focused or not. */
    focused: boolean;
    filteredData: Select2Data;
    readonly select2Options: Select2Option[];
    readonly select2Option: Select2Option;
    searchText: string;
    /** minimal data of show the search field */
    minCountForSearch: number | string;
    /** Unique id of the element. */
    id: string;
    /** Whether the element is required. */
    required: any;
    /** Whether selected items should be hidden. */
    disabled: any;
    /** Whether items are hidden when has. */
    hideSelectedItems: any;
    /** Whether the element is readonly. */
    readonly: any;
    /** The input element's value. */
    value: Select2UpdateValue;
    /** Tab index for the select2 element. */
    tabIndex: number;
    /** reset with no selected value */
    resettable: any;
    readonly ariaInvalid: boolean;
    readonly classMaterial: boolean;
    readonly classNostyle: boolean;
    readonly select2above: boolean;
    private _minCountForSearch?;
    private selection;
    private resultContainer;
    private results;
    private searchInput;
    private hoveringValue;
    private innerSearchText;
    private isSearchboxHidden;
    private selectionElement;
    private searchInputElement;
    private resultsElement;
    private _stateChanges;
    /** Tab index for the element. */
    private _tabIndex;
    private _disabled;
    private _required;
    private _readonly;
    private _multiple;
    private _material;
    private _noStyle;
    private _resettable;
    private _hideSelectedItems;
    private _clickDetection;
    private _clickDetectionFc;
    private _id;
    private _uid;
    private _value;
    private _previousNativeValue;
    private _infiniteScroll;
    constructor(_changeDetectorRef: ChangeDetectorRef, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _control: NgControl, tabIndex: string);
    /** View -> model callback called when select has been touched */
    private _onTouched;
    /** View -> model callback called when value changes */
    private _onChange;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    updateSearchBox(): void;
    hideSearch(): boolean;
    getOptionStyle(option: Select2Option): string;
    mouseenter(option: Select2Option): void;
    click(option: Select2Option): void;
    reset(e: MouseEvent): void;
    prevChange(event: Event): void;
    toggleOpenAndClose(): void;
    hasTemplate(option: (Select2Option | Select2Group), defaut: string): boolean;
    getTemplate(option: (Select2Option | Select2Group), defaut: string): any;
    private testSelection;
    private testValueChange;
    private updateFilteredData;
    private clickDetection;
    private clickExit;
    private ifParentContainsClass;
    private ifParentContainsId;
    private getParentElementByClass;
    private getParentElementById;
    private containClasses;
    focusin(): void;
    focusout(): void;
    private moveUp;
    private moveDown;
    private updateScrollFromOption;
    private selectByEnter;
    select(option: Select2Option | null): void;
    keyDown(e: KeyboardEvent): void;
    openKey(e: KeyboardEvent): void;
    trackBy(_index: number, item: Select2Option): any;
    searchUpdate(e: Event): void;
    isSelected(option: Select2Option): "true" | "false";
    isDisabled(option: Select2Option): "true" | "false";
    removeSelection(e: MouseEvent, option: Select2Option): void;
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value
     */
    writeValue(value: any): void;
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the value changes.
     */
    registerOnChange(fn: (value: any) => void): void;
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the component has been touched.
     */
    registerOnTouched(fn: () => {}): void;
    /**
     * Sets whether the component should be disabled.
     * Implemented as part of ControlValueAccessor.
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    _isErrorState(): boolean;
    private _testKey;
    private _getKey;
    private _isKey;
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    private _setSelectionByValue;
    /** Does some manual dirty checking on the native input `value` property. */
    private _dirtyCheckNativeValue;
    private _coerceBooleanProperty;
    private _focusSearchboxOrResultsElement;
    private _focus;
    onScroll(way: 'up' | 'down'): void;
}
