/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injector, Input, Output, QueryList, Renderer2, ViewEncapsulation, } from '@angular/core';
import { MatButton } from '@angular/material/button';
import { DOCUMENT } from '@angular/common';
import { forkJoin, fromEvent } from 'rxjs';
import { take } from 'rxjs/operators';
/** @type {?} */
var Z_INDEX_ITEM = 23;
var EcoFabSpeedDialActionsComponent = /** @class */ (function () {
    function EcoFabSpeedDialActionsComponent(injector, renderer) {
        this.renderer = renderer;
        /**
         * Whether the min-fab button exist in DOM
         */
        this.miniFabVisible = false;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    /**
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._buttons.changes.subscribe((/**
         * @return {?}
         */
        function () {
            _this.initButtonStates();
            _this._parent.setActionsVisibility();
        }));
        this.initButtonStates();
    };
    /**
     * @private
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.initButtonStates = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._buttons.forEach((/**
         * @param {?} button
         * @param {?} i
         * @return {?}
         */
        function (button, i) {
            _this.renderer.addClass(button._getHostElement(), 'eco-fab-action-item');
            _this.changeElementStyle(button._getHostElement(), 'z-index', '' + (Z_INDEX_ITEM - i));
        }));
    };
    /**
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._buttons) {
            return;
        }
        this.resetAnimationState();
        this.miniFabVisible = true;
        this.showMiniFabAnimation = setTimeout((/**
         * @return {?}
         */
        function () {
            _this._buttons.forEach((/**
             * @param {?} button
             * @param {?} i
             * @return {?}
             */
            function (button, i) {
                /** @type {?} */
                var transitionDelay = 0;
                /** @type {?} */
                var transform;
                if (_this._parent.animationMode === 'scale') {
                    // Incremental transition delay of 65ms for each action button
                    transitionDelay = 3 + (65 * i);
                    transform = 'scale(1)';
                }
                else {
                    transform = _this.getTranslateFunction('0');
                }
                /** @type {?} */
                var hostElement = button._getHostElement();
                _this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');
                _this.changeElementStyle(hostElement, 'opacity', '1');
                _this.changeElementStyle(hostElement, 'transform', transform);
            }));
        }), 50); // Be sure that *ngIf can show elements before trying to animate them
    };
    /**
     * @private
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.resetAnimationState = /**
     * @private
     * @return {?}
     */
    function () {
        clearTimeout(this.showMiniFabAnimation);
        if (this.hideMiniFab) {
            this.hideMiniFab.unsubscribe();
            this.hideMiniFab = null;
        }
    };
    /**
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._buttons) {
            return;
        }
        this.resetAnimationState();
        /** @type {?} */
        var obs = this._buttons.map((/**
         * @param {?} button
         * @param {?} i
         * @return {?}
         */
        function (button, i) {
            /** @type {?} */
            var opacity = '1';
            /** @type {?} */
            var transitionDelay = 0;
            /** @type {?} */
            var transform;
            if (_this._parent.animationMode === 'scale') {
                transitionDelay = 3 - (65 * i);
                transform = 'scale(0)';
                opacity = '0';
            }
            else {
                transform = _this.getTranslateFunction((55 * (i + 1) - (i * 5)) + 'px');
            }
            /** @type {?} */
            var hostElement = button._getHostElement();
            _this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');
            _this.changeElementStyle(hostElement, 'opacity', opacity);
            _this.changeElementStyle(hostElement, 'transform', transform);
            return fromEvent(hostElement, 'transitionend').pipe(take(1));
        }));
        // Wait for all animation to finish, then destroy their elements
        this.hideMiniFab = forkJoin(obs).subscribe((/**
         * @return {?}
         */
        function () { return _this.miniFabVisible = false; }));
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.getTranslateFunction = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var dir = this._parent.direction;
        /** @type {?} */
        var translateFn = (dir === 'up' || dir === 'down') ? 'translateY' : 'translateX';
        /** @type {?} */
        var sign = (dir === 'down' || dir === 'right') ? '-' : '';
        return translateFn + '(' + sign + value + ')';
    };
    /**
     * @private
     * @param {?} elem
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.changeElementStyle = /**
     * @private
     * @param {?} elem
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    function (elem, style, value) {
        // FIXME - Find a way to create a "wrapper" around the action button(s) provided by the user, so we don't change it's style tag
        this.renderer.setStyle(elem, style, value);
    };
    EcoFabSpeedDialActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'eco-fab-speed-dial-actions',
                    template: "\n        <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>"
                }] }
    ];
    /** @nocollapse */
    EcoFabSpeedDialActionsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: Renderer2 }
    ]; };
    EcoFabSpeedDialActionsComponent.propDecorators = {
        _buttons: [{ type: ContentChildren, args: [MatButton,] }]
    };
    return EcoFabSpeedDialActionsComponent;
}());
export { EcoFabSpeedDialActionsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype._parent;
    /** @type {?} */
    EcoFabSpeedDialActionsComponent.prototype._buttons;
    /**
     * Whether the min-fab button exist in DOM
     * @type {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.miniFabVisible;
    /**
     * The timeout ID for the callback to show the mini-fab buttons
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.showMiniFabAnimation;
    /**
     * When we will remove mini-fab buttons from DOM, after the animation is complete
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.hideMiniFab;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.renderer;
}
/**
 * \@dynamic \@see https://github.com/angular/angular/issues/20351#issuecomment-344009887
 */
var EcoFabSpeedDialComponent = /** @class */ (function () {
    function EcoFabSpeedDialComponent(elementRef, renderer, document) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.document = document;
        this.isInitialized = false;
        this._direction = 'up';
        this._open = false;
        this._animationMode = 'fling';
        this._fixed = false;
        this._documentClickUnlistener = null;
        this.openChange = new EventEmitter();
    }
    Object.defineProperty(EcoFabSpeedDialComponent.prototype, "fixed", {
        /**
         * Whether this speed dial is fixed on screen (user cannot change it by clicking)
         */
        get: /**
         * Whether this speed dial is fixed on screen (user cannot change it by clicking)
         * @return {?}
         */
        function () {
            return this._fixed;
        },
        set: /**
         * @param {?} fixed
         * @return {?}
         */
        function (fixed) {
            this._fixed = fixed;
            this._processOutsideClickState();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EcoFabSpeedDialComponent.prototype, "open", {
        /**
         * Whether this speed dial is opened
         */
        get: /**
         * Whether this speed dial is opened
         * @return {?}
         */
        function () {
            return this._open;
        },
        set: /**
         * @param {?} open
         * @return {?}
         */
        function (open) {
            /** @type {?} */
            var previousOpen = this._open;
            this._open = open;
            if (previousOpen !== this._open) {
                this.openChange.emit(this._open);
                if (this.isInitialized) {
                    this.setActionsVisibility();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EcoFabSpeedDialComponent.prototype, "direction", {
        /**
         * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'
         */
        get: /**
         * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'
         * @return {?}
         */
        function () {
            return this._direction;
        },
        set: /**
         * @param {?} direction
         * @return {?}
         */
        function (direction) {
            /** @type {?} */
            var previousDirection = this._direction;
            this._direction = direction;
            if (previousDirection !== this.direction) {
                this._setElementClass(previousDirection, false);
                this._setElementClass(this.direction, true);
                if (this.isInitialized) {
                    this.setActionsVisibility();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EcoFabSpeedDialComponent.prototype, "animationMode", {
        /**
         * The animation mode to open the speed dial. Can be 'fling' or 'scale'
         */
        get: /**
         * The animation mode to open the speed dial. Can be 'fling' or 'scale'
         * @return {?}
         */
        function () {
            return this._animationMode;
        },
        set: /**
         * @param {?} animationMode
         * @return {?}
         */
        function (animationMode) {
            var _this = this;
            /** @type {?} */
            var previousAnimationMode = this._animationMode;
            this._animationMode = animationMode;
            if (previousAnimationMode !== this._animationMode) {
                this._setElementClass(previousAnimationMode, false);
                this._setElementClass(this.animationMode, true);
                if (this.isInitialized) {
                    // To start another detect lifecycle and force the "close" on the action buttons
                    Promise.resolve(null).then((/**
                     * @return {?}
                     */
                    function () { return _this.open = false; }));
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.isInitialized = true;
        this.setActionsVisibility();
        this._setElementClass(this.direction, true);
        this._setElementClass(this.animationMode, true);
    };
    /**
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsetDocumentClickListener();
    };
    /**
     * Toggle the open state of this speed dial
     */
    /**
     * Toggle the open state of this speed dial
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype.toggle = /**
     * Toggle the open state of this speed dial
     * @return {?}
     */
    function () {
        this.open = !this.open;
    };
    /**
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype._onClick = /**
     * @return {?}
     */
    function () {
        if (!this.fixed && this.open) {
            this.open = false;
        }
    };
    /**
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype.setActionsVisibility = /**
     * @return {?}
     */
    function () {
        if (!this._childActions) {
            return;
        }
        if (this.open) {
            this._childActions.show();
        }
        else {
            this._childActions.hide();
        }
        this._processOutsideClickState();
    };
    /**
     * @private
     * @param {?} elemClass
     * @param {?} isAdd
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype._setElementClass = /**
     * @private
     * @param {?} elemClass
     * @param {?} isAdd
     * @return {?}
     */
    function (elemClass, isAdd) {
        /** @type {?} */
        var finalClass = "eco-" + elemClass;
        if (isAdd) {
            this.renderer.addClass(this.elementRef.nativeElement, finalClass);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);
        }
    };
    /**
     * @private
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype._processOutsideClickState = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.fixed && this.open) {
            this._setDocumentClickListener();
        }
        else {
            this._unsetDocumentClickListener();
        }
    };
    /**
     * @private
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype._setDocumentClickListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._documentClickUnlistener) {
            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', (/**
             * @return {?}
             */
            function () {
                _this.open = false;
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    EcoFabSpeedDialComponent.prototype._unsetDocumentClickListener = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._documentClickUnlistener) {
            this._documentClickUnlistener();
            this._documentClickUnlistener = null;
        }
    };
    EcoFabSpeedDialComponent.decorators = [
        { type: Component, args: [{
                    selector: 'eco-fab-speed-dial',
                    template: "\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    ",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:.6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:.3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:.3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}"]
                }] }
    ];
    /** @nocollapse */
    EcoFabSpeedDialComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    EcoFabSpeedDialComponent.propDecorators = {
        fixed: [{ type: Input }],
        open: [{ type: HostBinding, args: ['class.eco-opened',] }, { type: Input }],
        direction: [{ type: Input }],
        animationMode: [{ type: Input }],
        openChange: [{ type: Output }],
        _childActions: [{ type: ContentChild, args: [EcoFabSpeedDialActionsComponent, { static: false },] }],
        _onClick: [{ type: HostListener, args: ['click',] }]
    };
    return EcoFabSpeedDialComponent;
}());
export { EcoFabSpeedDialComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.isInitialized;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._open;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._animationMode;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._fixed;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._documentClickUnlistener;
    /** @type {?} */
    EcoFabSpeedDialComponent.prototype.openChange;
    /** @type {?} */
    EcoFabSpeedDialComponent.prototype._childActions;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.document;
}
var EcoFabSpeedDialTriggerComponent = /** @class */ (function () {
    function EcoFabSpeedDialTriggerComponent(injector) {
        this.spin = false;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    Object.defineProperty(EcoFabSpeedDialTriggerComponent.prototype, "sp", {
        /**
         * Whether this trigger should spin (360dg) while opening the speed dial
         */
        get: /**
         * Whether this trigger should spin (360dg) while opening the speed dial
         * @return {?}
         */
        function () {
            return this.spin;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    EcoFabSpeedDialTriggerComponent.prototype._onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this._parent.fixed) {
            this._parent.toggle();
            event.stopPropagation();
        }
    };
    EcoFabSpeedDialTriggerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'eco-fab-speed-dial-trigger',
                    template: "\n        <ng-content select=\"[mat-fab]\"></ng-content>"
                }] }
    ];
    /** @nocollapse */
    EcoFabSpeedDialTriggerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    EcoFabSpeedDialTriggerComponent.propDecorators = {
        sp: [{ type: HostBinding, args: ['class.eco-spin',] }],
        spin: [{ type: Input }],
        _onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return EcoFabSpeedDialTriggerComponent;
}());
export { EcoFabSpeedDialTriggerComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialTriggerComponent.prototype._parent;
    /** @type {?} */
    EcoFabSpeedDialTriggerComponent.prototype.spin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFiLXNwZWVkLWRpYWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWNvZGV2L2ZhYi1zcGVlZC1kaWFsLyIsInNvdXJjZXMiOlsibGliL2ZhYi1zcGVlZC1kaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULFlBQVksRUFDWixlQUFlLEVBQ2YsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixRQUFRLEVBQ1IsS0FBSyxFQUVMLE1BQU0sRUFDTixTQUFTLEVBQ1QsU0FBUyxFQUNULGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUN6RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBRWhDLFlBQVksR0FBRyxFQUFFO0FBS3ZCO0lBeUJJLHlDQUFZLFFBQWtCLEVBQVUsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVzs7OztRQVpwRCxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQWExQixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7O0lBRUQsNERBQWtCOzs7SUFBbEI7UUFBQSxpQkFPQztRQU5HLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVM7OztRQUFDO1lBQzVCLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLEtBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUN4QyxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lB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QUcsS0FBSyxDQUFDO1FBR2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFSRCxzQkFBbUMsK0NBQUU7UUFIckM7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7Ozs7O0lBU0Qsa0RBQVE7Ozs7SUFEUixVQUNTLEtBQVk7UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDdEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQzs7Z0JBM0JKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QyxRQUFRLEVBQUUsMERBQ3VDO2lCQUNwRDs7OztnQkFsVUcsUUFBUTs7O3FCQXlVUCxXQUFXLFNBQUMsZ0JBQWdCO3VCQUk1QixLQUFLOzJCQU1MLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBUXJDLHNDQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0F4QlksK0JBQStCOzs7Ozs7SUFDeEMsa0RBQTBDOztJQVMxQywrQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsXG4gICAgQ29tcG9uZW50LFxuICAgIENvbnRlbnRDaGlsZCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbmplY3RvcixcbiAgICBJbnB1dCxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3V0cHV0LFxuICAgIFF1ZXJ5TGlzdCxcbiAgICBSZW5kZXJlcjIsXG4gICAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWF0QnV0dG9uIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvYnV0dG9uJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGZvcmtKb2luLCBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgWl9JTkRFWF9JVEVNID0gMjM7XG5cbmV4cG9ydCB0eXBlIERpcmVjdGlvbiA9ICd1cCcgfCAnZG93bicgfCAnbGVmdCcgfCAncmlnaHQnO1xuZXhwb3J0IHR5cGUgQW5pbWF0aW9uTW9kZSA9ICdmbGluZycgfCAnc2NhbGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Vjby1mYWItc3BlZWQtZGlhbC1hY3Rpb25zJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbbWF0LW1pbmktZmFiXVwiICpuZ0lmPVwibWluaUZhYlZpc2libGVcIj48L25nLWNvbnRlbnQ+YCxcbn0pXG5leHBvcnQgY2xhc3MgRWNvRmFiU3BlZWREaWFsQWN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgX3BhcmVudDogRWNvRmFiU3BlZWREaWFsQ29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZHJlbihNYXRCdXR0b24pIF9idXR0b25zOiBRdWVyeUxpc3Q8TWF0QnV0dG9uPjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIG1pbi1mYWIgYnV0dG9uIGV4aXN0IGluIERPTVxuICAgICAqL1xuICAgIHB1YmxpYyBtaW5pRmFiVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWVvdXQgSUQgZm9yIHRoZSBjYWxsYmFjayB0byBzaG93IHRoZSBtaW5pLWZhYiBidXR0b25zXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG93TWluaUZhYkFuaW1hdGlvbjogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHdlIHdpbGwgcmVtb3ZlIG1pbmktZmFiIGJ1dHRvbnMgZnJvbSBET00sIGFmdGVyIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGhpZGVNaW5pRmFiOiBTdWJzY3JpcHRpb24gfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gaW5qZWN0b3IuZ2V0KEVjb0ZhYlNwZWVkRGlhbENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9idXR0b25zLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5pdEJ1dHRvblN0YXRlcygpO1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnNldEFjdGlvbnNWaXNpYmlsaXR5KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdEJ1dHRvblN0YXRlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEJ1dHRvblN0YXRlcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fYnV0dG9ucy5mb3JFYWNoKChidXR0b24sIGkpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoYnV0dG9uLl9nZXRIb3N0RWxlbWVudCgpLCAnZWNvLWZhYi1hY3Rpb24taXRlbScpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VFbGVtZW50U3R5bGUoYnV0dG9uLl9nZXRIb3N0RWxlbWVudCgpLCAnei1pbmRleCcsICcnICsgKFpfSU5ERVhfSVRFTSAtIGkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLl9idXR0b25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlc2V0QW5pbWF0aW9uU3RhdGUoKTtcbiAgICAgICAgdGhpcy5taW5pRmFiVmlzaWJsZSA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5zaG93TWluaUZhYkFuaW1hdGlvbiA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9ucy5mb3JFYWNoKChidXR0b24sIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNpdGlvbkRlbGF5ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnQuYW5pbWF0aW9uTW9kZSA9PT0gJ3NjYWxlJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZW1lbnRhbCB0cmFuc2l0aW9uIGRlbGF5IG9mIDY1bXMgZm9yIGVhY2ggYWN0aW9uIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXkgPSAzICsgKDY1ICogaSk7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9ICdzY2FsZSgxKSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gdGhpcy5nZXRUcmFuc2xhdGVGdW5jdGlvbignMCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gYnV0dG9uLl9nZXRIb3N0RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRWxlbWVudFN0eWxlKGhvc3RFbGVtZW50LCAndHJhbnNpdGlvbi1kZWxheScsIHRyYW5zaXRpb25EZWxheSArICdtcycpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRWxlbWVudFN0eWxlKGhvc3RFbGVtZW50LCAnb3BhY2l0eScsICcxJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VFbGVtZW50U3R5bGUoaG9zdEVsZW1lbnQsICd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDUwKTsgLy8gQmUgc3VyZSB0aGF0ICpuZ0lmIGNhbiBzaG93IGVsZW1lbnRzIGJlZm9yZSB0cnlpbmcgdG8gYW5pbWF0ZSB0aGVtXG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZXNldEFuaW1hdGlvblN0YXRlKCk6IHZvaWQge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5zaG93TWluaUZhYkFuaW1hdGlvbik7XG4gICAgICAgIGlmICh0aGlzLmhpZGVNaW5pRmFiKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGVNaW5pRmFiLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmhpZGVNaW5pRmFiID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5fYnV0dG9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZXNldEFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgICAgY29uc3Qgb2JzID0gdGhpcy5fYnV0dG9ucy5tYXAoKGJ1dHRvbiwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IG9wYWNpdHkgPSAnMSc7XG4gICAgICAgICAgICBsZXQgdHJhbnNpdGlvbkRlbGF5ID0gMDtcbiAgICAgICAgICAgIGxldCB0cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnQuYW5pbWF0aW9uTW9kZSA9PT0gJ3NjYWxlJykge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheSA9IDMgLSAoNjUgKiBpKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSAnc2NhbGUoMCknO1xuICAgICAgICAgICAgICAgIG9wYWNpdHkgPSAnMCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuZ2V0VHJhbnNsYXRlRnVuY3Rpb24oKDU1ICogKGkgKyAxKSAtIChpICogNSkpICsgJ3B4Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gYnV0dG9uLl9nZXRIb3N0RWxlbWVudCgpO1xuXG4gICAgICAgICAgICB0aGlzLmNoYW5nZUVsZW1lbnRTdHlsZShob3N0RWxlbWVudCwgJ3RyYW5zaXRpb24tZGVsYXknLCB0cmFuc2l0aW9uRGVsYXkgKyAnbXMnKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRWxlbWVudFN0eWxlKGhvc3RFbGVtZW50LCAnb3BhY2l0eScsIG9wYWNpdHkpO1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VFbGVtZW50U3R5bGUoaG9zdEVsZW1lbnQsICd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZnJvbUV2ZW50KGhvc3RFbGVtZW50LCAndHJhbnNpdGlvbmVuZCcpLnBpcGUodGFrZSgxKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFdhaXQgZm9yIGFsbCBhbmltYXRpb24gdG8gZmluaXNoLCB0aGVuIGRlc3Ryb3kgdGhlaXIgZWxlbWVudHNcbiAgICAgICAgdGhpcy5oaWRlTWluaUZhYiA9IGZvcmtKb2luKG9icykuc3Vic2NyaWJlKCgpID0+IHRoaXMubWluaUZhYlZpc2libGUgPSBmYWxzZSk7XG5cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFRyYW5zbGF0ZUZ1bmN0aW9uKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBkaXIgPSB0aGlzLl9wYXJlbnQuZGlyZWN0aW9uO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVGbiA9IChkaXIgPT09ICd1cCcgfHwgZGlyID09PSAnZG93bicpID8gJ3RyYW5zbGF0ZVknIDogJ3RyYW5zbGF0ZVgnO1xuICAgICAgICBjb25zdCBzaWduID0gKGRpciA9PT0gJ2Rvd24nIHx8IGRpciA9PT0gJ3JpZ2h0JykgPyAnLScgOiAnJztcblxuICAgICAgICByZXR1cm4gdHJhbnNsYXRlRm4gKyAnKCcgKyBzaWduICsgdmFsdWUgKyAnKSc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGFuZ2VFbGVtZW50U3R5bGUoZWxlbTogYW55LCBzdHlsZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIC8vIEZJWE1FIC0gRmluZCBhIHdheSB0byBjcmVhdGUgYSBcIndyYXBwZXJcIiBhcm91bmQgdGhlIGFjdGlvbiBidXR0b24ocykgcHJvdmlkZWQgYnkgdGhlIHVzZXIsIHNvIHdlIGRvbid0IGNoYW5nZSBpdCdzIHN0eWxlIHRhZ1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGVsZW0sIHN0eWxlLCB2YWx1ZSk7XG4gICAgfVxufVxuXG4vKiogQGR5bmFtaWMgQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yMDM1MSNpc3N1ZWNvbW1lbnQtMzQ0MDA5ODg3ICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2Vjby1mYWItc3BlZWQtZGlhbCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImVjby1mYWItc3BlZWQtZGlhbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxuZy1jb250ZW50IHNlbGVjdD1cImVjby1mYWItc3BlZWQtZGlhbC10cmlnZ2VyXCI+PC9uZy1jb250ZW50PlxuICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiZWNvLWZhYi1zcGVlZC1kaWFsLWFjdGlvbnNcIj48L25nLWNvbnRlbnQ+XG4gICAgICAgIDwvZGl2PlxuICAgIGAsXG4gICAgc3R5bGVVcmxzOiBbJ2ZhYi1zcGVlZC1kaWFsLnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBFY29GYWJTcGVlZERpYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByaXZhdGUgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHByaXZhdGUgX2RpcmVjdGlvbjogRGlyZWN0aW9uID0gJ3VwJztcbiAgICBwcml2YXRlIF9vcGVuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfYW5pbWF0aW9uTW9kZTogQW5pbWF0aW9uTW9kZSA9ICdmbGluZyc7XG4gICAgcHJpdmF0ZSBfZml4ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9kb2N1bWVudENsaWNrVW5saXN0ZW5lcjogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgc3BlZWQgZGlhbCBpcyBmaXhlZCBvbiBzY3JlZW4gKHVzZXIgY2Fubm90IGNoYW5nZSBpdCBieSBjbGlja2luZylcbiAgICAgKi9cbiAgICBASW5wdXQoKSBnZXQgZml4ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maXhlZDtcbiAgICB9XG5cbiAgICBzZXQgZml4ZWQoZml4ZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZml4ZWQgPSBmaXhlZDtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc091dHNpZGVDbGlja1N0YXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHNwZWVkIGRpYWwgaXMgb3BlbmVkXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5lY28tb3BlbmVkJylcbiAgICBASW5wdXQoKSBnZXQgb3BlbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZW47XG4gICAgfVxuXG4gICAgc2V0IG9wZW4ob3BlbjogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBwcmV2aW91c09wZW4gPSB0aGlzLl9vcGVuO1xuICAgICAgICB0aGlzLl9vcGVuID0gb3BlbjtcbiAgICAgICAgaWYgKHByZXZpb3VzT3BlbiAhPT0gdGhpcy5fb3Blbikge1xuICAgICAgICAgICAgdGhpcy5vcGVuQ2hhbmdlLmVtaXQodGhpcy5fb3Blbik7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3Rpb25zVmlzaWJpbGl0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiBvZiB0aGUgc3BlZWQgZGlhbC4gQ2FuIGJlICd1cCcsICdkb3duJywgJ2xlZnQnIG9yICdyaWdodCdcbiAgICAgKi9cbiAgICBASW5wdXQoKSBnZXQgZGlyZWN0aW9uKCk6IERpcmVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgc2V0IGRpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBwcmV2aW91c0RpcmVjdGlvbiA9IHRoaXMuX2RpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICBpZiAocHJldmlvdXNEaXJlY3Rpb24gIT09IHRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRFbGVtZW50Q2xhc3MocHJldmlvdXNEaXJlY3Rpb24sIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX3NldEVsZW1lbnRDbGFzcyh0aGlzLmRpcmVjdGlvbiwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGlvbnNWaXNpYmlsaXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW5pbWF0aW9uIG1vZGUgdG8gb3BlbiB0aGUgc3BlZWQgZGlhbC4gQ2FuIGJlICdmbGluZycgb3IgJ3NjYWxlJ1xuICAgICAqL1xuICAgIEBJbnB1dCgpIGdldCBhbmltYXRpb25Nb2RlKCk6IEFuaW1hdGlvbk1vZGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uTW9kZTtcbiAgICB9XG5cbiAgICBzZXQgYW5pbWF0aW9uTW9kZShhbmltYXRpb25Nb2RlOiBBbmltYXRpb25Nb2RlKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzQW5pbWF0aW9uTW9kZSA9IHRoaXMuX2FuaW1hdGlvbk1vZGU7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbk1vZGUgPSBhbmltYXRpb25Nb2RlO1xuICAgICAgICBpZiAocHJldmlvdXNBbmltYXRpb25Nb2RlICE9PSB0aGlzLl9hbmltYXRpb25Nb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRFbGVtZW50Q2xhc3MocHJldmlvdXNBbmltYXRpb25Nb2RlLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9zZXRFbGVtZW50Q2xhc3ModGhpcy5hbmltYXRpb25Nb2RlLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgICAgIC8vIFRvIHN0YXJ0IGFub3RoZXIgZGV0ZWN0IGxpZmVjeWNsZSBhbmQgZm9yY2UgdGhlIFwiY2xvc2VcIiBvbiB0aGUgYWN0aW9uIGJ1dHRvbnNcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUobnVsbCkudGhlbigoKSA9PiB0aGlzLm9wZW4gPSBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAT3V0cHV0KCkgb3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gICAgQENvbnRlbnRDaGlsZChFY29GYWJTcGVlZERpYWxBY3Rpb25zQ29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIF9jaGlsZEFjdGlvbnM6IEVjb0ZhYlNwZWVkRGlhbEFjdGlvbnNDb21wb25lbnQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMiwgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQpIHtcbiAgICB9XG5cbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0QWN0aW9uc1Zpc2liaWxpdHkoKTtcbiAgICAgICAgdGhpcy5fc2V0RWxlbWVudENsYXNzKHRoaXMuZGlyZWN0aW9uLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fc2V0RWxlbWVudENsYXNzKHRoaXMuYW5pbWF0aW9uTW9kZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3Vuc2V0RG9jdW1lbnRDbGlja0xpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRoZSBvcGVuIHN0YXRlIG9mIHRoaXMgc3BlZWQgZGlhbFxuICAgICAqL1xuICAgIHB1YmxpYyB0b2dnbGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3BlbiA9ICF0aGlzLm9wZW47XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICAgIF9vbkNsaWNrKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuZml4ZWQgJiYgdGhpcy5vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFjdGlvbnNWaXNpYmlsaXR5KCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX2NoaWxkQWN0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3Blbikge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRBY3Rpb25zLnNob3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkQWN0aW9ucy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvY2Vzc091dHNpZGVDbGlja1N0YXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2V0RWxlbWVudENsYXNzKGVsZW1DbGFzczogc3RyaW5nLCBpc0FkZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBmaW5hbENsYXNzID0gYGVjby0ke2VsZW1DbGFzc31gO1xuICAgICAgICBpZiAoaXNBZGQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIGZpbmFsQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgZmluYWxDbGFzcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9wcm9jZXNzT3V0c2lkZUNsaWNrU3RhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5maXhlZCAmJiB0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX3NldERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdW5zZXREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3NldERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kb2N1bWVudENsaWNrVW5saXN0ZW5lcikge1xuICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnRDbGlja1VubGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmRvY3VtZW50LCAnY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3Vuc2V0RG9jdW1lbnRDbGlja0xpc3RlbmVyKCkge1xuICAgICAgICBpZiAodGhpcy5fZG9jdW1lbnRDbGlja1VubGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50Q2xpY2tVbmxpc3RlbmVyKCk7XG4gICAgICAgICAgICB0aGlzLl9kb2N1bWVudENsaWNrVW5saXN0ZW5lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdlY28tZmFiLXNwZWVkLWRpYWwtdHJpZ2dlcicsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW21hdC1mYWJdXCI+PC9uZy1jb250ZW50PmAsXG59KVxuZXhwb3J0IGNsYXNzIEVjb0ZhYlNwZWVkRGlhbFRyaWdnZXJDb21wb25lbnQge1xuICAgIHByaXZhdGUgX3BhcmVudDogRWNvRmFiU3BlZWREaWFsQ29tcG9uZW50O1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHRyaWdnZXIgc2hvdWxkIHNwaW4gKDM2MGRnKSB3aGlsZSBvcGVuaW5nIHRoZSBzcGVlZCBkaWFsXG4gICAgICovXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5lY28tc3BpbicpIGdldCBzcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BpbjtcbiAgICB9XG5cbiAgICBASW5wdXQoKSBzcGluID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gaW5qZWN0b3IuZ2V0KEVjb0ZhYlNwZWVkRGlhbENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICAgIF9vbkNsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudC5maXhlZCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnRvZ2dsZSgpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==