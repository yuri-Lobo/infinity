/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injector, Input, Output, QueryList, Renderer2, ViewEncapsulation, } from '@angular/core';
import { MatButton } from '@angular/material/button';
import { DOCUMENT } from '@angular/common';
import { forkJoin, fromEvent } from 'rxjs';
import { take } from 'rxjs/operators';
/** @type {?} */
const Z_INDEX_ITEM = 23;
export class EcoFabSpeedDialActionsComponent {
    /**
     * @param {?} injector
     * @param {?} renderer
     */
    constructor(injector, renderer) {
        this.renderer = renderer;
        /**
         * Whether the min-fab button exist in DOM
         */
        this.miniFabVisible = false;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._buttons.changes.subscribe((/**
         * @return {?}
         */
        () => {
            this.initButtonStates();
            this._parent.setActionsVisibility();
        }));
        this.initButtonStates();
    }
    /**
     * @private
     * @return {?}
     */
    initButtonStates() {
        this._buttons.forEach((/**
         * @param {?} button
         * @param {?} i
         * @return {?}
         */
        (button, i) => {
            this.renderer.addClass(button._getHostElement(), 'eco-fab-action-item');
            this.changeElementStyle(button._getHostElement(), 'z-index', '' + (Z_INDEX_ITEM - i));
        }));
    }
    /**
     * @return {?}
     */
    show() {
        if (!this._buttons) {
            return;
        }
        this.resetAnimationState();
        this.miniFabVisible = true;
        this.showMiniFabAnimation = setTimeout((/**
         * @return {?}
         */
        () => {
            this._buttons.forEach((/**
             * @param {?} button
             * @param {?} i
             * @return {?}
             */
            (button, i) => {
                /** @type {?} */
                let transitionDelay = 0;
                /** @type {?} */
                let transform;
                if (this._parent.animationMode === 'scale') {
                    // Incremental transition delay of 65ms for each action button
                    transitionDelay = 3 + (65 * i);
                    transform = 'scale(1)';
                }
                else {
                    transform = this.getTranslateFunction('0');
                }
                /** @type {?} */
                const hostElement = button._getHostElement();
                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');
                this.changeElementStyle(hostElement, 'opacity', '1');
                this.changeElementStyle(hostElement, 'transform', transform);
            }));
        }), 50); // Be sure that *ngIf can show elements before trying to animate them
    }
    /**
     * @private
     * @return {?}
     */
    resetAnimationState() {
        clearTimeout(this.showMiniFabAnimation);
        if (this.hideMiniFab) {
            this.hideMiniFab.unsubscribe();
            this.hideMiniFab = null;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (!this._buttons) {
            return;
        }
        this.resetAnimationState();
        /** @type {?} */
        const obs = this._buttons.map((/**
         * @param {?} button
         * @param {?} i
         * @return {?}
         */
        (button, i) => {
            /** @type {?} */
            let opacity = '1';
            /** @type {?} */
            let transitionDelay = 0;
            /** @type {?} */
            let transform;
            if (this._parent.animationMode === 'scale') {
                transitionDelay = 3 - (65 * i);
                transform = 'scale(0)';
                opacity = '0';
            }
            else {
                transform = this.getTranslateFunction((55 * (i + 1) - (i * 5)) + 'px');
            }
            /** @type {?} */
            const hostElement = button._getHostElement();
            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');
            this.changeElementStyle(hostElement, 'opacity', opacity);
            this.changeElementStyle(hostElement, 'transform', transform);
            return fromEvent(hostElement, 'transitionend').pipe(take(1));
        }));
        // Wait for all animation to finish, then destroy their elements
        this.hideMiniFab = forkJoin(obs).subscribe((/**
         * @return {?}
         */
        () => this.miniFabVisible = false));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getTranslateFunction(value) {
        /** @type {?} */
        const dir = this._parent.direction;
        /** @type {?} */
        const translateFn = (dir === 'up' || dir === 'down') ? 'translateY' : 'translateX';
        /** @type {?} */
        const sign = (dir === 'down' || dir === 'right') ? '-' : '';
        return translateFn + '(' + sign + value + ')';
    }
    /**
     * @private
     * @param {?} elem
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    changeElementStyle(elem, style, value) {
        // FIXME - Find a way to create a "wrapper" around the action button(s) provided by the user, so we don't change it's style tag
        this.renderer.setStyle(elem, style, value);
    }
}
EcoFabSpeedDialActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial-actions',
                template: `
        <ng-content select="[mat-mini-fab]" *ngIf="miniFabVisible"></ng-content>`
            }] }
];
/** @nocollapse */
EcoFabSpeedDialActionsComponent.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 }
];
EcoFabSpeedDialActionsComponent.propDecorators = {
    _buttons: [{ type: ContentChildren, args: [MatButton,] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype._parent;
    /** @type {?} */
    EcoFabSpeedDialActionsComponent.prototype._buttons;
    /**
     * Whether the min-fab button exist in DOM
     * @type {?}
     */
    EcoFabSpeedDialActionsComponent.prototype.miniFabVisible;
    /**
     * The timeout ID for the callback to show the mini-fab buttons
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.showMiniFabAnimation;
    /**
     * When we will remove mini-fab buttons from DOM, after the animation is complete
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.hideMiniFab;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialActionsComponent.prototype.renderer;
}
/**
 * \@dynamic \@see https://github.com/angular/angular/issues/20351#issuecomment-344009887
 */
export class EcoFabSpeedDialComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     * @param {?} document
     */
    constructor(elementRef, renderer, document) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.document = document;
        this.isInitialized = false;
        this._direction = 'up';
        this._open = false;
        this._animationMode = 'fling';
        this._fixed = false;
        this._documentClickUnlistener = null;
        this.openChange = new EventEmitter();
    }
    /**
     * Whether this speed dial is fixed on screen (user cannot change it by clicking)
     * @return {?}
     */
    get fixed() {
        return this._fixed;
    }
    /**
     * @param {?} fixed
     * @return {?}
     */
    set fixed(fixed) {
        this._fixed = fixed;
        this._processOutsideClickState();
    }
    /**
     * Whether this speed dial is opened
     * @return {?}
     */
    get open() {
        return this._open;
    }
    /**
     * @param {?} open
     * @return {?}
     */
    set open(open) {
        /** @type {?} */
        const previousOpen = this._open;
        this._open = open;
        if (previousOpen !== this._open) {
            this.openChange.emit(this._open);
            if (this.isInitialized) {
                this.setActionsVisibility();
            }
        }
    }
    /**
     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'
     * @return {?}
     */
    get direction() {
        return this._direction;
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    set direction(direction) {
        /** @type {?} */
        const previousDirection = this._direction;
        this._direction = direction;
        if (previousDirection !== this.direction) {
            this._setElementClass(previousDirection, false);
            this._setElementClass(this.direction, true);
            if (this.isInitialized) {
                this.setActionsVisibility();
            }
        }
    }
    /**
     * The animation mode to open the speed dial. Can be 'fling' or 'scale'
     * @return {?}
     */
    get animationMode() {
        return this._animationMode;
    }
    /**
     * @param {?} animationMode
     * @return {?}
     */
    set animationMode(animationMode) {
        /** @type {?} */
        const previousAnimationMode = this._animationMode;
        this._animationMode = animationMode;
        if (previousAnimationMode !== this._animationMode) {
            this._setElementClass(previousAnimationMode, false);
            this._setElementClass(this.animationMode, true);
            if (this.isInitialized) {
                // To start another detect lifecycle and force the "close" on the action buttons
                Promise.resolve(null).then((/**
                 * @return {?}
                 */
                () => this.open = false));
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.isInitialized = true;
        this.setActionsVisibility();
        this._setElementClass(this.direction, true);
        this._setElementClass(this.animationMode, true);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsetDocumentClickListener();
    }
    /**
     * Toggle the open state of this speed dial
     * @return {?}
     */
    toggle() {
        this.open = !this.open;
    }
    /**
     * @return {?}
     */
    _onClick() {
        if (!this.fixed && this.open) {
            this.open = false;
        }
    }
    /**
     * @return {?}
     */
    setActionsVisibility() {
        if (!this._childActions) {
            return;
        }
        if (this.open) {
            this._childActions.show();
        }
        else {
            this._childActions.hide();
        }
        this._processOutsideClickState();
    }
    /**
     * @private
     * @param {?} elemClass
     * @param {?} isAdd
     * @return {?}
     */
    _setElementClass(elemClass, isAdd) {
        /** @type {?} */
        const finalClass = `eco-${elemClass}`;
        if (isAdd) {
            this.renderer.addClass(this.elementRef.nativeElement, finalClass);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _processOutsideClickState() {
        if (!this.fixed && this.open) {
            this._setDocumentClickListener();
        }
        else {
            this._unsetDocumentClickListener();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _setDocumentClickListener() {
        if (!this._documentClickUnlistener) {
            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', (/**
             * @return {?}
             */
            () => {
                this.open = false;
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _unsetDocumentClickListener() {
        if (this._documentClickUnlistener) {
            this._documentClickUnlistener();
            this._documentClickUnlistener = null;
        }
    }
}
EcoFabSpeedDialComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial',
                template: `
        <div class="eco-fab-speed-dial-container">
            <ng-content select="eco-fab-speed-dial-trigger"></ng-content>
            <ng-content select="eco-fab-speed-dial-actions"></ng-content>
        </div>
    `,
                encapsulation: ViewEncapsulation.None,
                styles: ["eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:.6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:.3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:.3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}"]
            }] }
];
/** @nocollapse */
EcoFabSpeedDialComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
EcoFabSpeedDialComponent.propDecorators = {
    fixed: [{ type: Input }],
    open: [{ type: HostBinding, args: ['class.eco-opened',] }, { type: Input }],
    direction: [{ type: Input }],
    animationMode: [{ type: Input }],
    openChange: [{ type: Output }],
    _childActions: [{ type: ContentChild, args: [EcoFabSpeedDialActionsComponent, { static: false },] }],
    _onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.isInitialized;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._direction;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._open;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._animationMode;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._fixed;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype._documentClickUnlistener;
    /** @type {?} */
    EcoFabSpeedDialComponent.prototype.openChange;
    /** @type {?} */
    EcoFabSpeedDialComponent.prototype._childActions;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialComponent.prototype.document;
}
export class EcoFabSpeedDialTriggerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.spin = false;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    /**
     * Whether this trigger should spin (360dg) while opening the speed dial
     * @return {?}
     */
    get sp() {
        return this.spin;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onClick(event) {
        if (!this._parent.fixed) {
            this._parent.toggle();
            event.stopPropagation();
        }
    }
}
EcoFabSpeedDialTriggerComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial-trigger',
                template: `
        <ng-content select="[mat-fab]"></ng-content>`
            }] }
];
/** @nocollapse */
EcoFabSpeedDialTriggerComponent.ctorParameters = () => [
    { type: Injector }
];
EcoFabSpeedDialTriggerComponent.propDecorators = {
    sp: [{ type: HostBinding, args: ['class.eco-spin',] }],
    spin: [{ type: Input }],
    _onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    EcoFabSpeedDialTriggerComponent.prototype._parent;
    /** @type {?} */
    EcoFabSpeedDialTriggerComponent.prototype.spin;
}
//# sourceMappingURL=data:application/json;base64,