{"version":3,"sources":["ng://@ecodev/fab-speed-dial/lib/fab-speed-dial.ts","ng://@ecodev/fab-speed-dial/lib/fab-speed-dial.module.ts"],"names":["EcoFabSpeedDialActionsComponent","injector","renderer","this","miniFabVisible","_parent","get","EcoFabSpeedDialComponent","prototype","ngAfterContentInit","_this","_buttons","changes","subscribe","initButtonStates","setActionsVisibility","forEach","button","i","addClass","_getHostElement","changeElementStyle","show","resetAnimationState","showMiniFabAnimation","setTimeout","transform","transitionDelay","animationMode","getTranslateFunction","hostElement","clearTimeout","hideMiniFab","unsubscribe","hide","obs","map","opacity","fromEvent","pipe","take","forkJoin","value","dir","direction","elem","style","setStyle","Component","args","selector","template","Injector","Renderer2","ContentChildren","MatButton","elementRef","document","isInitialized","_direction","_open","_animationMode","_fixed","_documentClickUnlistener","openChange","EventEmitter","Object","defineProperty","fixed","_processOutsideClickState","open","previousOpen","emit","previousDirection","_setElementClass","previousAnimationMode","Promise","resolve","then","ngOnDestroy","_unsetDocumentClickListener","toggle","_onClick","_childActions","elemClass","isAdd","finalClass","nativeElement","removeClass","_setDocumentClickListener","listen","encapsulation","ViewEncapsulation","None","ElementRef","Document","decorators","type","Inject","DOCUMENT","Input","HostBinding","Output","ContentChild","static","HostListener","EcoFabSpeedDialTriggerComponent","spin","event","stopPropagation","EcoFabSpeedDialModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Injector,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    Renderer2,\n    ViewEncapsulation,\n} from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { DOCUMENT } from '@angular/common';\nimport { forkJoin, fromEvent, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst Z_INDEX_ITEM = 23;\n\nexport type Direction = 'up' | 'down' | 'left' | 'right';\nexport type AnimationMode = 'fling' | 'scale';\n\n@Component({\n    selector: 'eco-fab-speed-dial-actions',\n    template: `\n        <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`,\n})\nexport class EcoFabSpeedDialActionsComponent implements AfterContentInit {\n    private _parent: EcoFabSpeedDialComponent;\n\n    @ContentChildren(MatButton) _buttons: QueryList<MatButton>;\n\n    /**\n     * Whether the min-fab button exist in DOM\n     */\n    public miniFabVisible = false;\n\n    /**\n     * The timeout ID for the callback to show the mini-fab buttons\n     */\n    private showMiniFabAnimation: ReturnType<typeof setTimeout>;\n\n    /**\n     * When we will remove mini-fab buttons from DOM, after the animation is complete\n     */\n    private hideMiniFab: Subscription | null;\n\n    constructor(injector: Injector, private renderer: Renderer2) {\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n\n    ngAfterContentInit(): void {\n        this._buttons.changes.subscribe(() => {\n            this.initButtonStates();\n            this._parent.setActionsVisibility();\n        });\n\n        this.initButtonStates();\n    }\n\n    private initButtonStates(): void {\n        this._buttons.forEach((button, i) => {\n            this.renderer.addClass(button._getHostElement(), 'eco-fab-action-item');\n            this.changeElementStyle(button._getHostElement(), 'z-index', '' + (Z_INDEX_ITEM - i));\n        });\n    }\n\n    show(): void {\n        if (!this._buttons) {\n            return;\n        }\n\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n\n        this.showMiniFabAnimation = setTimeout(() => {\n            this._buttons.forEach((button, i) => {\n                let transitionDelay = 0;\n                let transform;\n                if (this._parent.animationMode === 'scale') {\n                    // Incremental transition delay of 65ms for each action button\n                    transitionDelay = 3 + (65 * i);\n                    transform = 'scale(1)';\n                } else {\n                    transform = this.getTranslateFunction('0');\n                }\n\n                const hostElement = button._getHostElement();\n                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n                this.changeElementStyle(hostElement, 'opacity', '1');\n                this.changeElementStyle(hostElement, 'transform', transform);\n            });\n        }, 50); // Be sure that *ngIf can show elements before trying to animate them\n    }\n\n    private resetAnimationState(): void {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n\n    hide(): void {\n        if (!this._buttons) {\n            return;\n        }\n\n        this.resetAnimationState();\n\n        const obs = this._buttons.map((button, i) => {\n            let opacity = '1';\n            let transitionDelay = 0;\n            let transform;\n\n            if (this._parent.animationMode === 'scale') {\n                transitionDelay = 3 - (65 * i);\n                transform = 'scale(0)';\n                opacity = '0';\n            } else {\n                transform = this.getTranslateFunction((55 * (i + 1) - (i * 5)) + 'px');\n            }\n\n            const hostElement = button._getHostElement();\n\n            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n            this.changeElementStyle(hostElement, 'opacity', opacity);\n            this.changeElementStyle(hostElement, 'transform', transform);\n\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n\n        // Wait for all animation to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => this.miniFabVisible = false);\n\n    }\n\n    private getTranslateFunction(value: string): string {\n        const dir = this._parent.direction;\n        const translateFn = (dir === 'up' || dir === 'down') ? 'translateY' : 'translateX';\n        const sign = (dir === 'down' || dir === 'right') ? '-' : '';\n\n        return translateFn + '(' + sign + value + ')';\n    }\n\n    private changeElementStyle(elem: any, style: string, value: string) {\n        // FIXME - Find a way to create a \"wrapper\" around the action button(s) provided by the user, so we don't change it's style tag\n        this.renderer.setStyle(elem, style, value);\n    }\n}\n\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\n@Component({\n    selector: 'eco-fab-speed-dial',\n    template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `,\n    styleUrls: ['fab-speed-dial.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class EcoFabSpeedDialComponent implements OnDestroy, AfterContentInit {\n    private isInitialized = false;\n    private _direction: Direction = 'up';\n    private _open = false;\n    private _animationMode: AnimationMode = 'fling';\n    private _fixed = false;\n    private _documentClickUnlistener: (() => void) | null = null;\n\n    /**\n     * Whether this speed dial is fixed on screen (user cannot change it by clicking)\n     */\n    @Input() get fixed(): boolean {\n        return this._fixed;\n    }\n\n    set fixed(fixed: boolean) {\n        this._fixed = fixed;\n        this._processOutsideClickState();\n    }\n\n    /**\n     * Whether this speed dial is opened\n     */\n    @HostBinding('class.eco-opened')\n    @Input() get open(): boolean {\n        return this._open;\n    }\n\n    set open(open: boolean) {\n        const previousOpen = this._open;\n        this._open = open;\n        if (previousOpen !== this._open) {\n            this.openChange.emit(this._open);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    @Input() get direction(): Direction {\n        return this._direction;\n    }\n\n    set direction(direction: Direction) {\n        const previousDirection = this._direction;\n        this._direction = direction;\n        if (previousDirection !== this.direction) {\n            this._setElementClass(previousDirection, false);\n            this._setElementClass(this.direction, true);\n\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n\n    /**\n     * The animation mode to open the speed dial. Can be 'fling' or 'scale'\n     */\n    @Input() get animationMode(): AnimationMode {\n        return this._animationMode;\n    }\n\n    set animationMode(animationMode: AnimationMode) {\n        const previousAnimationMode = this._animationMode;\n        this._animationMode = animationMode;\n        if (previousAnimationMode !== this._animationMode) {\n            this._setElementClass(previousAnimationMode, false);\n            this._setElementClass(this.animationMode, true);\n\n            if (this.isInitialized) {\n                // To start another detect lifecycle and force the \"close\" on the action buttons\n                Promise.resolve(null).then(() => this.open = false);\n            }\n        }\n    }\n\n    @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(EcoFabSpeedDialActionsComponent, {static: false}) _childActions: EcoFabSpeedDialActionsComponent;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, @Inject(DOCUMENT) private document: Document) {\n    }\n\n    ngAfterContentInit(): void {\n        this.isInitialized = true;\n        this.setActionsVisibility();\n        this._setElementClass(this.direction, true);\n        this._setElementClass(this.animationMode, true);\n    }\n\n    ngOnDestroy() {\n        this._unsetDocumentClickListener();\n    }\n\n    /**\n     * Toggle the open state of this speed dial\n     */\n    public toggle(): void {\n        this.open = !this.open;\n    }\n\n    @HostListener('click')\n    _onClick(): void {\n        if (!this.fixed && this.open) {\n            this.open = false;\n        }\n    }\n\n    setActionsVisibility(): void {\n        if (!this._childActions) {\n            return;\n        }\n\n        if (this.open) {\n            this._childActions.show();\n        } else {\n            this._childActions.hide();\n        }\n        this._processOutsideClickState();\n    }\n\n    private _setElementClass(elemClass: string, isAdd: boolean): void {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        } else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n\n    private _processOutsideClickState() {\n        if (!this.fixed && this.open) {\n            this._setDocumentClickListener();\n        } else {\n            this._unsetDocumentClickListener();\n        }\n    }\n\n    private _setDocumentClickListener() {\n        if (!this._documentClickUnlistener) {\n            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open = false;\n            });\n        }\n    }\n\n    private _unsetDocumentClickListener() {\n        if (this._documentClickUnlistener) {\n            this._documentClickUnlistener();\n            this._documentClickUnlistener = null;\n        }\n    }\n\n}\n\n@Component({\n    selector: 'eco-fab-speed-dial-trigger',\n    template: `\n        <ng-content select=\"[mat-fab]\"></ng-content>`,\n})\nexport class EcoFabSpeedDialTriggerComponent {\n    private _parent: EcoFabSpeedDialComponent;\n\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    @HostBinding('class.eco-spin') get sp() {\n        return this.spin;\n    }\n\n    @Input() spin = false;\n\n    constructor(injector: Injector) {\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n\n    @HostListener('click', ['$event'])\n    _onClick(event: Event): void {\n        if (!this._parent.fixed) {\n            this._parent.toggle();\n            event.stopPropagation();\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    EcoFabSpeedDialActionsComponent,\n    EcoFabSpeedDialComponent,\n    EcoFabSpeedDialTriggerComponent,\n} from './fab-speed-dial';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        EcoFabSpeedDialActionsComponent,\n        EcoFabSpeedDialComponent,\n        EcoFabSpeedDialTriggerComponent,\n    ],\n    exports: [\n        EcoFabSpeedDialActionsComponent,\n        EcoFabSpeedDialComponent,\n        EcoFabSpeedDialTriggerComponent,\n    ],\n})\nexport class EcoFabSpeedDialModule {\n}\n"]}