(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs/operators'), require('rxjs'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ng2-adsk-forge-viewer', ['exports', '@angular/core', '@angular/common/http', 'rxjs/operators', 'rxjs', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ng2-adsk-forge-viewer'] = {}, global.ng.core, global.ng.common.http, global.rxjs.operators, global.rxjs, global.ng.platformBrowser));
}(this, (function (exports, core, http, operators, rxjs, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ScriptService = /** @class */ (function () {
        function ScriptService() {
            this.scripts = {};
            // Nothing to do
        }
        ScriptService.prototype.load = function () {
            var _this = this;
            var urls = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                urls[_i] = arguments[_i];
            }
            var promises = [];
            urls.forEach(function (src) {
                if (_this.scripts[src] && _this.scripts[src].loaded) {
                    return;
                }
                _this.scripts[src] = { src: src, loaded: false };
                return promises.push(_this.loadScript(src));
            });
            return Promise.all(promises);
        };
        ScriptService.prototype.loadScript = function (name) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                // resolve if already loaded
                if (_this.scripts[name] && _this.scripts[name].loaded) {
                    resolve({ src: name, loaded: true, status: 'Already Loaded' });
                    return;
                }
                // load script
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = _this.scripts[name].src;
                if (script.readyState) { // IE
                    script.onreadystatechange = function () {
                        if (script.readyState === 'loaded' || script.readyState === 'complete') {
                            script.onreadystatechange = null;
                            _this.scripts[name].loaded = true;
                            resolve({ src: name, loaded: true, status: 'Loaded' });
                        }
                    };
                }
                else { // Others
                    script.onload = function () {
                        _this.scripts[name].loaded = true;
                        resolve({ src: name, loaded: true, status: 'Loaded' });
                    };
                }
                script.onerror = function (error) { return resolve({ src: name, loaded: false, status: 'Loaded' }); };
                document.getElementsByTagName('head')[0].appendChild(script);
            });
        };
        return ScriptService;
    }());
    ScriptService.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    ScriptService.ctorParameters = function () { return []; };

    /// <reference types="forge-viewer" />
    var ViewerEventArgs = /** @class */ (function () {
        function ViewerEventArgs() {
        }
        return ViewerEventArgs;
    }());
    var AggregationSelectionChangedEventArgs = /** @class */ (function (_super) {
        __extends(AggregationSelectionChangedEventArgs, _super);
        function AggregationSelectionChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT;
            return _this;
        }
        return AggregationSelectionChangedEventArgs;
    }(ViewerEventArgs));
    var AnimationReadyEventArgs = /** @class */ (function (_super) {
        __extends(AnimationReadyEventArgs, _super);
        function AnimationReadyEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.ANIMATION_READY_EVENT;
            return _this;
        }
        return AnimationReadyEventArgs;
    }(ViewerEventArgs));
    var CameraChangedEventArgs = /** @class */ (function (_super) {
        __extends(CameraChangedEventArgs, _super);
        function CameraChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.CAMERA_CHANGE_EVENT;
            return _this;
        }
        return CameraChangedEventArgs;
    }(ViewerEventArgs));
    var CutplanesChangedEventArgs = /** @class */ (function (_super) {
        __extends(CutplanesChangedEventArgs, _super);
        function CutplanesChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.CUTPLANES_CHANGE_EVENT;
            return _this;
        }
        return CutplanesChangedEventArgs;
    }(ViewerEventArgs));
    var EscapeEventArgs = /** @class */ (function (_super) {
        __extends(EscapeEventArgs, _super);
        function EscapeEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.ESCAPE_EVENT;
            return _this;
        }
        return EscapeEventArgs;
    }(ViewerEventArgs));
    var ExplodeChangedEventArgs = /** @class */ (function (_super) {
        __extends(ExplodeChangedEventArgs, _super);
        function ExplodeChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.EXPLODE_CHANGE_EVENT;
            return _this;
        }
        return ExplodeChangedEventArgs;
    }(ViewerEventArgs));
    var ExtensionLoadedUnloadedEventArgs = /** @class */ (function (_super) {
        __extends(ExtensionLoadedUnloadedEventArgs, _super);
        function ExtensionLoadedUnloadedEventArgs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ExtensionLoadedUnloadedEventArgs;
    }(ViewerEventArgs));
    var ExtensionLoadedEventArgs = /** @class */ (function (_super) {
        __extends(ExtensionLoadedEventArgs, _super);
        function ExtensionLoadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.EXTENSION_LOADED_EVENT;
            return _this;
        }
        return ExtensionLoadedEventArgs;
    }(ExtensionLoadedUnloadedEventArgs));
    var ExtensionUnloadedEventArgs = /** @class */ (function (_super) {
        __extends(ExtensionUnloadedEventArgs, _super);
        function ExtensionUnloadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.EXTENSION_UNLOADED_EVENT;
            return _this;
        }
        return ExtensionUnloadedEventArgs;
    }(ExtensionLoadedUnloadedEventArgs));
    var FinalFrameRenderedChangedEventArgs = /** @class */ (function (_super) {
        __extends(FinalFrameRenderedChangedEventArgs, _super);
        function FinalFrameRenderedChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT;
            return _this;
        }
        return FinalFrameRenderedChangedEventArgs;
    }(ViewerEventArgs));
    var FitToViewEventArgs = /** @class */ (function (_super) {
        __extends(FitToViewEventArgs, _super);
        function FitToViewEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.FIT_TO_VIEW_EVENT;
            return _this;
        }
        return FitToViewEventArgs;
    }(ViewerEventArgs));
    var FragmentsLoadedEventArgs = /** @class */ (function (_super) {
        __extends(FragmentsLoadedEventArgs, _super);
        function FragmentsLoadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.FRAGMENTS_LOADED_EVENT;
            return _this;
        }
        return FragmentsLoadedEventArgs;
    }(ViewerEventArgs));
    var FullscreenEventArgs = /** @class */ (function (_super) {
        __extends(FullscreenEventArgs, _super);
        function FullscreenEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.FULLSCREEN_MODE_EVENT;
            return _this;
        }
        return FullscreenEventArgs;
    }(ViewerEventArgs));
    var GeometryLoadedEventArgs = /** @class */ (function (_super) {
        __extends(GeometryLoadedEventArgs, _super);
        function GeometryLoadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.GEOMETRY_LOADED_EVENT;
            return _this;
        }
        return GeometryLoadedEventArgs;
    }(ViewerEventArgs));
    var HideEventArgs = /** @class */ (function (_super) {
        __extends(HideEventArgs, _super);
        function HideEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.HIDE_EVENT;
            return _this;
        }
        return HideEventArgs;
    }(ViewerEventArgs));
    var HyperlinkEventArgs = /** @class */ (function (_super) {
        __extends(HyperlinkEventArgs, _super);
        function HyperlinkEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.HYPERLINK_EVENT;
            return _this;
        }
        return HyperlinkEventArgs;
    }(ViewerEventArgs));
    var IsolateEventArgs = /** @class */ (function (_super) {
        __extends(IsolateEventArgs, _super);
        function IsolateEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.ISOLATE_EVENT;
            return _this;
        }
        return IsolateEventArgs;
    }(ViewerEventArgs));
    var LayerVisibilityEventArgs = /** @class */ (function (_super) {
        __extends(LayerVisibilityEventArgs, _super);
        function LayerVisibilityEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT;
            return _this;
        }
        return LayerVisibilityEventArgs;
    }(ViewerEventArgs));
    var LoadMissingGeometryEventArgs = /** @class */ (function (_super) {
        __extends(LoadMissingGeometryEventArgs, _super);
        function LoadMissingGeometryEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.LOAD_MISSING_GEOMETRY;
            return _this;
        }
        return LoadMissingGeometryEventArgs;
    }(ViewerEventArgs));
    var ModelRootLoadedEventArgs = /** @class */ (function (_super) {
        __extends(ModelRootLoadedEventArgs, _super);
        function ModelRootLoadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT;
            return _this;
        }
        return ModelRootLoadedEventArgs;
    }(ViewerEventArgs));
    var ModelUnloadedEventArgs = /** @class */ (function (_super) {
        __extends(ModelUnloadedEventArgs, _super);
        function ModelUnloadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.MODEL_UNLOADED_EVENT;
            return _this;
        }
        return ModelUnloadedEventArgs;
    }(ViewerEventArgs));
    var NavigationModeChangedEventArgs = /** @class */ (function (_super) {
        __extends(NavigationModeChangedEventArgs, _super);
        function NavigationModeChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT;
            return _this;
        }
        return NavigationModeChangedEventArgs;
    }(ViewerEventArgs));
    var ObjectTreeEventArgs = /** @class */ (function (_super) {
        __extends(ObjectTreeEventArgs, _super);
        function ObjectTreeEventArgs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ObjectTreeEventArgs;
    }(ViewerEventArgs));
    var ObjectTreeCreatedEventArgs = /** @class */ (function (_super) {
        __extends(ObjectTreeCreatedEventArgs, _super);
        function ObjectTreeCreatedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT;
            return _this;
        }
        return ObjectTreeCreatedEventArgs;
    }(ObjectTreeEventArgs));
    var ObjectTreeUnavailableEventArgs = /** @class */ (function (_super) {
        __extends(ObjectTreeUnavailableEventArgs, _super);
        function ObjectTreeUnavailableEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT;
            return _this;
        }
        return ObjectTreeUnavailableEventArgs;
    }(ObjectTreeEventArgs));
    var PrefEventArgs = /** @class */ (function (_super) {
        __extends(PrefEventArgs, _super);
        function PrefEventArgs() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PrefEventArgs;
    }(ViewerEventArgs));
    var PrefChangedEventArgs = /** @class */ (function (_super) {
        __extends(PrefChangedEventArgs, _super);
        function PrefChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.PREF_CHANGED_EVENT;
            return _this;
        }
        return PrefChangedEventArgs;
    }(PrefEventArgs));
    var PrefResetEventArgs = /** @class */ (function (_super) {
        __extends(PrefResetEventArgs, _super);
        function PrefResetEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.PREF_RESET_EVENT;
            return _this;
        }
        return PrefResetEventArgs;
    }(PrefEventArgs));
    var ProgressUpdateEventArgs = /** @class */ (function (_super) {
        __extends(ProgressUpdateEventArgs, _super);
        function ProgressUpdateEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.PROGRESS_UPDATE_EVENT;
            return _this;
        }
        return ProgressUpdateEventArgs;
    }(ViewerEventArgs));
    var RenderOptionChangedEventArgs = /** @class */ (function (_super) {
        __extends(RenderOptionChangedEventArgs, _super);
        function RenderOptionChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT;
            return _this;
        }
        return RenderOptionChangedEventArgs;
    }(ViewerEventArgs));
    var RenderPresentedEventArgs = /** @class */ (function (_super) {
        __extends(RenderPresentedEventArgs, _super);
        function RenderPresentedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.RENDER_PRESENTED_EVENT;
            return _this;
        }
        return RenderPresentedEventArgs;
    }(ViewerEventArgs));
    var ResetEventArgs = /** @class */ (function (_super) {
        __extends(ResetEventArgs, _super);
        function ResetEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.RESET_EVENT;
            return _this;
        }
        return ResetEventArgs;
    }(ViewerEventArgs));
    var RestoreDefaultSettingsEventArgs = /** @class */ (function (_super) {
        __extends(RestoreDefaultSettingsEventArgs, _super);
        function RestoreDefaultSettingsEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT;
            return _this;
        }
        return RestoreDefaultSettingsEventArgs;
    }(ViewerEventArgs));
    var SelectionChangedEventArgs = /** @class */ (function (_super) {
        __extends(SelectionChangedEventArgs, _super);
        function SelectionChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.SELECTION_CHANGED_EVENT;
            return _this;
        }
        return SelectionChangedEventArgs;
    }(ViewerEventArgs));
    var ShowEventArgs = /** @class */ (function (_super) {
        __extends(ShowEventArgs, _super);
        function ShowEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.SHOW_EVENT;
            return _this;
        }
        return ShowEventArgs;
    }(ViewerEventArgs));
    var TexturesLoadedEventArgs = /** @class */ (function (_super) {
        __extends(TexturesLoadedEventArgs, _super);
        function TexturesLoadedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.TEXTURES_LOADED_EVENT;
            return _this;
        }
        return TexturesLoadedEventArgs;
    }(ViewerEventArgs));
    var ToolChangedEventArgs = /** @class */ (function (_super) {
        __extends(ToolChangedEventArgs, _super);
        function ToolChangedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.TOOL_CHANGE_EVENT;
            return _this;
        }
        return ToolChangedEventArgs;
    }(ViewerEventArgs));
    var ViewerInitializedEventArgs = /** @class */ (function (_super) {
        __extends(ViewerInitializedEventArgs, _super);
        function ViewerInitializedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.VIEWER_INITIALIZED;
            return _this;
        }
        return ViewerInitializedEventArgs;
    }(ViewerEventArgs));
    var ViewerResizeEventArgs = /** @class */ (function (_super) {
        __extends(ViewerResizeEventArgs, _super);
        function ViewerResizeEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.VIEWER_RESIZE_EVENT;
            return _this;
        }
        return ViewerResizeEventArgs;
    }(ViewerEventArgs));
    var ViewerStateRestoredEventArgs = /** @class */ (function (_super) {
        __extends(ViewerStateRestoredEventArgs, _super);
        function ViewerStateRestoredEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT;
            return _this;
        }
        return ViewerStateRestoredEventArgs;
    }(ViewerEventArgs));
    var ViewerUnInitializedEventArgs = /** @class */ (function (_super) {
        __extends(ViewerUnInitializedEventArgs, _super);
        function ViewerUnInitializedEventArgs() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.type = Autodesk.Viewing.VIEWER_UNINITIALIZED;
            return _this;
        }
        return ViewerUnInitializedEventArgs;
    }(ViewerEventArgs));
    /**
     * Base extension that all other extensions can inherit from
     */
    var Extension = /** @class */ (function () {
        function Extension(viewer, options) {
            this.viewer = undefined;
            this.extOptions = undefined;
            this.eventArgsTypeMap = {};
            this.viewer = viewer;
            this.extOptions = options;
            this.registerEventTypes();
        }
        Extension.registerExtension = function (extensionName, extension) {
            Autodesk.Viewing.theExtensionManager.registerExtension(extensionName, extension);
        };
        Extension.unregisterExtension = function (extensionName) {
            Autodesk.Viewing.theExtensionManager.unregisterExtension(extensionName);
        };
        /** Register event args types that we will cast to 'proper' objects */
        Extension.prototype.registerEventTypes = function () {
            // tslint:disable:max-line-length
            this.eventArgsTypeMap[Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT] = AggregationSelectionChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.ANIMATION_READY_EVENT] = AnimationReadyEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.CAMERA_CHANGE_EVENT] = CameraChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.CUTPLANES_CHANGE_EVENT] = CutplanesChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.ESCAPE_EVENT] = EscapeEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.EXPLODE_CHANGE_EVENT] = ExplodeChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_LOADED_EVENT] = ExtensionLoadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_UNLOADED_EVENT] = ExtensionUnloadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT] = FinalFrameRenderedChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.FIT_TO_VIEW_EVENT] = FitToViewEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.FRAGMENTS_LOADED_EVENT] = FragmentsLoadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.FULLSCREEN_MODE_EVENT] = FullscreenEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.GEOMETRY_LOADED_EVENT] = GeometryLoadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.HIDE_EVENT] = HideEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.HYPERLINK_EVENT] = HyperlinkEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.ISOLATE_EVENT] = IsolateEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT] = LayerVisibilityEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.LOAD_MISSING_GEOMETRY] = LoadMissingGeometryEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT] = ModelRootLoadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.MODEL_UNLOADED_EVENT] = ModelUnloadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT] = NavigationModeChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT] = ObjectTreeCreatedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT] = ObjectTreeUnavailableEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.PREF_CHANGED_EVENT] = PrefChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.PREF_RESET_EVENT] = PrefResetEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.PROGRESS_UPDATE_EVENT] = ProgressUpdateEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT] = RenderOptionChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.RENDER_PRESENTED_EVENT] = RenderPresentedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.RESET_EVENT] = ResetEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT] = RestoreDefaultSettingsEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.SELECTION_CHANGED_EVENT] = SelectionChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.SHOW_EVENT] = ShowEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.TEXTURES_LOADED_EVENT] = TexturesLoadedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.TOOL_CHANGE_EVENT] = ToolChangedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_INITIALIZED] = ViewerInitializedEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_RESIZE_EVENT] = ViewerResizeEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT] = ViewerStateRestoredEventArgs;
            this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_UNINITIALIZED] = ViewerUnInitializedEventArgs;
            // tslint:enable:max-line-length
        };
        /** Cast Viewer event args to class */
        Extension.prototype.castArgs = function (args) {
            var e_1, _a;
            if (Array.isArray(args)) {
                return args.map(this.castArgs);
            }
            if (!args || typeof args !== 'object' || !args.hasOwnProperty('type')) {
                // Can't cast this object
                return args;
            }
            // Create new object of appropriate type
            var clazz = this.eventArgsTypeMap[args.type];
            var typedItem = Object.create(clazz.prototype);
            try {
                // Cast any properties
                for (var _b = __values(Object.keys(args)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var k = _c.value;
                    typedItem[k] = this.castArgs(args[k]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return typedItem;
        };
        return Extension;
    }());
    Extension.extensionName = '';

    var BasicExtension = /** @class */ (function (_super) {
        __extends(BasicExtension, _super);
        function BasicExtension() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.eventStreams = [];
            _this.events = [
                Autodesk.Viewing.FIT_TO_VIEW_EVENT,
                Autodesk.Viewing.FULLSCREEN_MODE_EVENT,
                Autodesk.Viewing.GEOMETRY_LOADED_EVENT,
                Autodesk.Viewing.HIDE_EVENT,
                Autodesk.Viewing.ISOLATE_EVENT,
                Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,
                Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT,
                Autodesk.Viewing.RESET_EVENT,
                Autodesk.Viewing.SELECTION_CHANGED_EVENT,
                Autodesk.Viewing.SHOW_EVENT,
            ];
            return _this;
        }
        BasicExtension.registerExtension = function (extensionName, callback) {
            BasicExtension.callback = callback;
            _super.registerExtension.call(this, BasicExtension.extensionName, BasicExtension);
        };
        BasicExtension.prototype.load = function () {
            var _this = this;
            this.events.forEach(function (eventName) {
                var obs = rxjs.fromEvent(_this.viewer, eventName).pipe(operators.map(function (args) { return _this.castArgs(args); }));
                _this.eventStreams.push(obs);
            });
            this.viewerEvents = rxjs.merge.apply(void 0, __spread(this.eventStreams));
            if (BasicExtension.debugMessages)
                console.log(BasicExtension.extensionName, 'loaded!');
            if (BasicExtension.callback)
                BasicExtension.callback(this);
            return true;
        };
        BasicExtension.prototype.unload = function () {
            this.eventStreams = [];
            this.viewerEvents = undefined;
            if (BasicExtension.debugMessages)
                console.log(BasicExtension.extensionName, 'unloaded!');
            return true;
        };
        BasicExtension.prototype.activate = function () {
            return true;
        };
        BasicExtension.prototype.deactivate = function () {
            return true;
        };
        return BasicExtension;
    }(Extension));
    BasicExtension.extensionName = 'BasicExtension';
    BasicExtension.debugMessages = false;
    BasicExtension.callback = null;

    var ViewerComponent = /** @class */ (function () {
        function ViewerComponent(script) {
            this.script = script;
            this.onDocumentChanged = new core.EventEmitter();
            this.onItemLoaded = new core.EventEmitter();
            this.onError = new core.EventEmitter();
            // Viewer events
            this.onFitToView = new core.EventEmitter();
            this.onFullscreen = new core.EventEmitter();
            this.onGeometryLoaded = new core.EventEmitter();
            this.onHide = new core.EventEmitter();
            this.onIsolate = new core.EventEmitter();
            this.onObjectTreeCreated = new core.EventEmitter();
            this.onObjectTreeUnavailable = new core.EventEmitter();
            this.onReset = new core.EventEmitter();
            this.onSelectionChanged = new core.EventEmitter();
            this.onShow = new core.EventEmitter();
            // Debugging
            this.showDebugMessages = false;
            this._viewerOptions = null;
            this.viewerInitialized = false;
            this.unsubscribe = new rxjs.Subject();
            this.containerId = this.getDivName();
        }
        /**
         * Helper to allow callers to specify documentId with or without the required urn: prefix
         */
        ViewerComponent.verifyUrn = function (documentId) {
            return (documentId.startsWith('urn:')) ? documentId : "urn:" + documentId;
        };
        Object.defineProperty(ViewerComponent.prototype, "viewerOptions", {
            get: function () {
                return this._viewerOptions;
            },
            set: function (options) {
                if (!this.viewerInitialized && options) {
                    this._viewerOptions = options;
                    void this.initialiseViewer();
                }
            },
            enumerable: false,
            configurable: true
        });
        ViewerComponent.prototype.ngOnDestroy = function () {
            this.unregisterBasicExtension();
            if (this.viewer) {
                this.viewer.tearDown();
                this.viewer.uninitialize();
            }
            this.viewer = null;
            this.viewerInitialized = false;
            this.unsubscribe.next();
            this.unsubscribe.complete();
        };
        /**
         * Helper method to get some default viewer options
         */
        ViewerComponent.prototype.getDefaultViewerOptions = function (onViewerInitialized, getAccessToken) {
            return {
                initializerOptions: {
                    env: 'AutodeskProduction',
                    getAccessToken: getAccessToken,
                    api: 'derivativeV2',
                },
                onViewerInitialized: onViewerInitialized,
            };
        };
        Object.defineProperty(ViewerComponent.prototype, "Viewer3D", {
            /**
             * Get a reference to the current 3D viewer
             */
            get: function () {
                return this.viewer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewerComponent.prototype, "DocumentId", {
            /**
             * Get the document urn that has been loaded
             */
            get: function () {
                return this.documentId;
            },
            /**
             * Set the document urn, which triggers the viewer to load the document
             */
            set: function (value) {
                this.documentId = value;
                this.loadModel(this.documentId);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewerComponent.prototype, "Container", {
            /**
             * Get the container element
             */
            get: function () {
                return document.getElementById(this.containerId);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewerComponent.prototype, "ContainerId", {
            /**
             * Get the id assigned to the viewer
             */
            get: function () {
                return this.containerId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewerComponent.prototype, "basicExtension", {
            get: function () {
                return this.basicExt;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ViewerComponent.prototype, "extensionEvents", {
            get: function () {
                if (this.basicExt) {
                    return this.basicExt.viewerEvents;
                }
            },
            enumerable: false,
            configurable: true
        });
        ViewerComponent.prototype.loadDocumentNode = function (document, bubbleNode, options) {
            return this.viewer.loadDocumentNode(document, bubbleNode, options);
        };
        /**
         * We don't bundle Autodesk's scripts with the component, and we don't really want users to have
         * to add the scripts to their index.html pages. So we'll load them when required.
         */
        ViewerComponent.prototype.loadScripts = function () {
            var _this = this;
            var version = this.viewerOptions.version || '7.*';
            var url = "https://developer.api.autodesk.com/modelderivative/v2/viewers/" + version + "/viewer3D.min.js";
            return this.script.load(url)
                .then(function (data) {
                _this.log('script loaded ', data);
            })
                .catch(function (error) { return _this.error(error); });
        };
        /**
         * Initialises the viewer
         */
        ViewerComponent.prototype.initialiseViewer = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: 
                        // Load scripts first
                        return [4 /*yield*/, this.loadScripts()];
                        case 1:
                            // Load scripts first
                            _c.sent();
                            if (this.viewerOptions.onViewerScriptsLoaded)
                                this.viewerOptions.onViewerScriptsLoaded();
                            // Check if the viewer has already been initialised - this isn't the nicest, but we've set the env in our
                            // options above so we at least know that it was us who did this!
                            if (!Autodesk.Viewing.Private.env) {
                                Autodesk.Viewing.Initializer(this.viewerOptions.initializerOptions, function () {
                                    _this.initialized();
                                });
                            }
                            else {
                                // We need to give an initialised viewing application a tick to allow the DOM element
                                // to be established before we re-draw
                                setTimeout(function () {
                                    _this.initialized();
                                });
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        ViewerComponent.prototype.initialized = function () {
            var _a, _b;
            // Register an extension to help us raise events
            var extName = this.registerBasicExtension();
            var config = this.addBasicExtensionConfig(extName);
            // Support large models
            if (this.viewerOptions.enableMemoryManagement) {
                config.loaderExtensions = { svf: 'Autodesk.MemoryLimited' };
            }
            // Create a new viewer
            if (this.viewerOptions.headlessViewer) {
                this.viewer = new Autodesk.Viewing.Viewer3D(this.Container, config);
            }
            else {
                this.viewer = new Autodesk.Viewing.GuiViewer3D(this.Container, config);
            }
            // set a document url if environment set to Local
            var url;
            if (((_a = this.viewerOptions.initializerOptions) === null || _a === void 0 ? void 0 : _a.env) === 'Local') {
                url = (_b = this.viewerOptions.initializerOptions) === null || _b === void 0 ? void 0 : _b.document;
            }
            // Start the viewer
            this.viewer.start(url);
            // Viewer is ready - scripts are loaded and we've create a new viewing application
            this.viewerInitialized = true;
            this.viewerOptions.onViewerInitialized({ viewerComponent: this, viewer: this.viewer });
        };
        /**
         * Loads a model in to the viewer via it's urn
         */
        ViewerComponent.prototype.loadModel = function (documentId) {
            if (!documentId) {
                return;
            }
            // Add urn: to the beginning of document id if needed
            Autodesk.Viewing.Document.load(ViewerComponent.verifyUrn(documentId), this.onDocumentLoadSuccess.bind(this), this.onDocumentLoadFailure.bind(this));
        };
        /**
         * Document successfully loaded
         */
        ViewerComponent.prototype.onDocumentLoadSuccess = function (document) {
            if (!document.getRoot())
                return;
            // Emit an event so the caller can do something
            // TODO: config option to specify which viewable to display (how?)
            this.onDocumentChanged.emit({ document: document, viewerComponent: this, viewer: this.viewer });
            if (this.viewerOptions.showFirstViewable === undefined || this.viewerOptions.showFirstViewable) {
                var model = document.getRoot().getDefaultGeometry();
                if (!model) {
                    var allModels = document.getRoot().search({ type: 'geometry' });
                    model = allModels[0];
                }
                void this.viewer.loadDocumentNode(document, model, undefined);
            }
        };
        /**
         * Failed to load document
         */
        ViewerComponent.prototype.onDocumentLoadFailure = function (errorCode) {
            this.error('onDocumentLoadFailure() - errorCode:' + errorCode);
            this.onError.emit(errorCode);
        };
        /**
         * Register our BasicExtension with the Forge Viewer
         */
        ViewerComponent.prototype.registerBasicExtension = function () {
            BasicExtension.registerExtension(BasicExtension.extensionName, this.extensionLoaded.bind(this));
            return BasicExtension.extensionName;
        };
        /**
         * Subscript to BasicExtension events when the extension has been
         * succesfully loaded by the viewer.
         */
        ViewerComponent.prototype.extensionLoaded = function (ext) {
            var _this = this;
            this.basicExt = ext;
            ext.viewerEvents
                .pipe(operators.takeUntil(this.unsubscribe))
                .subscribe(function (item) {
                _this.log(item);
                if (item instanceof FitToViewEventArgs) {
                    _this.onFitToView.emit(item);
                }
                else if (item instanceof FullscreenEventArgs) {
                    _this.onFullscreen.emit(item);
                }
                else if (item instanceof GeometryLoadedEventArgs) {
                    _this.onGeometryLoaded.emit(item);
                }
                else if (item instanceof HideEventArgs) {
                    _this.onHide.emit(item);
                }
                else if (item instanceof IsolateEventArgs) {
                    _this.onIsolate.emit(item);
                }
                else if (item instanceof ObjectTreeCreatedEventArgs) {
                    _this.onObjectTreeCreated.emit(item);
                }
                else if (item instanceof ObjectTreeUnavailableEventArgs) {
                    _this.onObjectTreeUnavailable.emit(item);
                }
                else if (item instanceof ResetEventArgs) {
                    _this.onReset.emit(item);
                }
                else if (item instanceof SelectionChangedEventArgs) {
                    _this.onSelectionChanged.emit(item);
                }
                else if (item instanceof ShowEventArgs) {
                    _this.onShow.emit(item);
                }
            });
        };
        ViewerComponent.prototype.unregisterBasicExtension = function () {
            BasicExtension.unregisterExtension(BasicExtension.extensionName);
            this.basicExt = null;
        };
        /**
         * Add list of extensions to the viewer config that has been provided
         * The allows the user to register their own extensions.
         */
        ViewerComponent.prototype.addBasicExtensionConfig = function (extName) {
            var config = Object.assign({}, this.viewerOptions.viewerConfig, { extensions: [] });
            // We will always load our basic extension with any others specified by the caller
            if (this.viewerOptions.viewerConfig && this.viewerOptions.viewerConfig.extensions) {
                config.extensions = __spread(this.viewerOptions.viewerConfig.extensions, [extName]);
            }
            else {
                config.extensions = [extName];
            }
            return config;
        };
        ViewerComponent.prototype.log = function (message) {
            var optionalParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalParams[_i - 1] = arguments[_i];
            }
            if (!this.showDebugMessages)
                return;
            console.log(message, optionalParams);
        };
        ViewerComponent.prototype.error = function (message) {
            var optionalParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                optionalParams[_i - 1] = arguments[_i];
            }
            if (!this.showDebugMessages)
                return;
            console.error(message, optionalParams);
        };
        ViewerComponent.prototype.getDivName = function () {
            var S4 = function () {
                // tslint:disable-next-line:no-bitwise
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            var guid = (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
            return "viewer_" + guid;
        };
        return ViewerComponent;
    }());
    ViewerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'adsk-forge-viewer',
                    template: "<div [id]=\"containerId\" class=\"forge-viewer-container\"></div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: ["@import url(\"https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.min.css\");"]
                },] }
    ];
    /** @nocollapse */
    ViewerComponent.ctorParameters = function () { return [
        { type: ScriptService }
    ]; };
    ViewerComponent.propDecorators = {
        onDocumentChanged: [{ type: core.Output }],
        onItemLoaded: [{ type: core.Output }],
        onError: [{ type: core.Output }],
        onFitToView: [{ type: core.Output }],
        onFullscreen: [{ type: core.Output }],
        onGeometryLoaded: [{ type: core.Output }],
        onHide: [{ type: core.Output }],
        onIsolate: [{ type: core.Output }],
        onObjectTreeCreated: [{ type: core.Output }],
        onObjectTreeUnavailable: [{ type: core.Output }],
        onReset: [{ type: core.Output }],
        onSelectionChanged: [{ type: core.Output }],
        onShow: [{ type: core.Output }],
        showDebugMessages: [{ type: core.Input }],
        viewerOptions: [{ type: core.Input }]
    };

    var ThumbnailComponent = /** @class */ (function () {
        function ThumbnailComponent(http, sanitizer) {
            this.http = http;
            this.sanitizer = sanitizer;
        }
        ThumbnailComponent.prototype.ngOnChanges = function () {
            if (this.thumbnailOptions) {
                this.setImageSrc(this.thumbnailOptions.defaultImageSrc);
                this.getThumbnail(this.thumbnailOptions.documentId);
            }
        };
        ThumbnailComponent.prototype.getThumbnail = function (documentId) {
            var _this = this;
            var url = "https://developer.api.autodesk.com/modelderivative/v2/designdata/" + documentId + "/thumbnail";
            var opts = '';
            if (this.thumbnailOptions.width)
                opts += "width=" + this.thumbnailOptions.width + "&";
            if (this.thumbnailOptions.height)
                opts += "height=" + this.thumbnailOptions.height + "&";
            if (opts)
                url += "?" + opts.slice(0, -1);
            this.thumbnailOptions.getAccessToken(this.setAccessToken.bind(this));
            var headers = {
                Authorization: "Bearer " + this.token,
                'Content-Type': 'image/png',
            };
            this.http.get(url, { headers: headers, responseType: 'arraybuffer' })
                .subscribe(function (data) { return (data) ? _this.setImageSrc("data:image/png;base64," + _this.toBase64(data))
                : _this.setImageSrc(); }, function (error) { return _this.setImageSrc(); });
        };
        ThumbnailComponent.prototype.setAccessToken = function (accessToken, expiryTime) {
            this.token = accessToken;
            this.expire = expiryTime;
        };
        ThumbnailComponent.prototype.toBase64 = function (data) {
            return btoa(String.fromCharCode.apply(String, __spread(new Uint8Array(data))));
        };
        ThumbnailComponent.prototype.setImageSrc = function (src) {
            if (src === void 0) { src = ''; }
            var imageSrc = '';
            if (src) {
                imageSrc = src;
            }
            else {
                imageSrc = (this.thumbnailOptions && this.thumbnailOptions.defaultImageSrc) || '';
            }
            this.imageSrc = this.sanitizer.bypassSecurityTrustUrl(imageSrc);
        };
        return ThumbnailComponent;
    }());
    ThumbnailComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'adsk-forge-thumbnail',
                    template: "<img [src]=\"imageSrc\" />\n"
                },] }
    ];
    /** @nocollapse */
    ThumbnailComponent.ctorParameters = function () { return [
        { type: http.HttpClient },
        { type: platformBrowser.DomSanitizer }
    ]; };
    ThumbnailComponent.propDecorators = {
        thumbnailOptions: [{ type: core.Input }]
    };

    var ViewerModule = /** @class */ (function () {
        function ViewerModule() {
        }
        return ViewerModule;
    }());
    ViewerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [ViewerComponent, ThumbnailComponent],
                    imports: [http.HttpClientModule],
                    exports: [ViewerComponent, ThumbnailComponent],
                    providers: [ScriptService],
                },] }
    ];

    /*
     * Public API Surface of ng2-adsk-forge-viewer
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AggregationSelectionChangedEventArgs = AggregationSelectionChangedEventArgs;
    exports.AnimationReadyEventArgs = AnimationReadyEventArgs;
    exports.BasicExtension = BasicExtension;
    exports.CameraChangedEventArgs = CameraChangedEventArgs;
    exports.CutplanesChangedEventArgs = CutplanesChangedEventArgs;
    exports.EscapeEventArgs = EscapeEventArgs;
    exports.ExplodeChangedEventArgs = ExplodeChangedEventArgs;
    exports.Extension = Extension;
    exports.ExtensionLoadedEventArgs = ExtensionLoadedEventArgs;
    exports.ExtensionLoadedUnloadedEventArgs = ExtensionLoadedUnloadedEventArgs;
    exports.ExtensionUnloadedEventArgs = ExtensionUnloadedEventArgs;
    exports.FinalFrameRenderedChangedEventArgs = FinalFrameRenderedChangedEventArgs;
    exports.FitToViewEventArgs = FitToViewEventArgs;
    exports.FragmentsLoadedEventArgs = FragmentsLoadedEventArgs;
    exports.FullscreenEventArgs = FullscreenEventArgs;
    exports.GeometryLoadedEventArgs = GeometryLoadedEventArgs;
    exports.HideEventArgs = HideEventArgs;
    exports.HyperlinkEventArgs = HyperlinkEventArgs;
    exports.IsolateEventArgs = IsolateEventArgs;
    exports.LayerVisibilityEventArgs = LayerVisibilityEventArgs;
    exports.LoadMissingGeometryEventArgs = LoadMissingGeometryEventArgs;
    exports.ModelRootLoadedEventArgs = ModelRootLoadedEventArgs;
    exports.ModelUnloadedEventArgs = ModelUnloadedEventArgs;
    exports.NavigationModeChangedEventArgs = NavigationModeChangedEventArgs;
    exports.ObjectTreeCreatedEventArgs = ObjectTreeCreatedEventArgs;
    exports.ObjectTreeEventArgs = ObjectTreeEventArgs;
    exports.ObjectTreeUnavailableEventArgs = ObjectTreeUnavailableEventArgs;
    exports.PrefChangedEventArgs = PrefChangedEventArgs;
    exports.PrefEventArgs = PrefEventArgs;
    exports.PrefResetEventArgs = PrefResetEventArgs;
    exports.ProgressUpdateEventArgs = ProgressUpdateEventArgs;
    exports.RenderOptionChangedEventArgs = RenderOptionChangedEventArgs;
    exports.RenderPresentedEventArgs = RenderPresentedEventArgs;
    exports.ResetEventArgs = ResetEventArgs;
    exports.RestoreDefaultSettingsEventArgs = RestoreDefaultSettingsEventArgs;
    exports.ScriptService = ScriptService;
    exports.SelectionChangedEventArgs = SelectionChangedEventArgs;
    exports.ShowEventArgs = ShowEventArgs;
    exports.TexturesLoadedEventArgs = TexturesLoadedEventArgs;
    exports.ThumbnailComponent = ThumbnailComponent;
    exports.ToolChangedEventArgs = ToolChangedEventArgs;
    exports.ViewerComponent = ViewerComponent;
    exports.ViewerEventArgs = ViewerEventArgs;
    exports.ViewerInitializedEventArgs = ViewerInitializedEventArgs;
    exports.ViewerModule = ViewerModule;
    exports.ViewerResizeEventArgs = ViewerResizeEventArgs;
    exports.ViewerStateRestoredEventArgs = ViewerStateRestoredEventArgs;
    exports.ViewerUnInitializedEventArgs = ViewerUnInitializedEventArgs;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng2-adsk-forge-viewer.umd.js.map
