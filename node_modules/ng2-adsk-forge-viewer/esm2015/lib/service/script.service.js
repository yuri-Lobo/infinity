import { Injectable } from '@angular/core';
export class ScriptService {
    constructor() {
        this.scripts = {};
        // Nothing to do
    }
    load(...urls) {
        const promises = [];
        urls.forEach((src) => {
            if (this.scripts[src] && this.scripts[src].loaded) {
                return;
            }
            this.scripts[src] = { src, loaded: false };
            return promises.push(this.loadScript(src));
        });
        return Promise.all(promises);
    }
    loadScript(name) {
        return new Promise((resolve, reject) => {
            // resolve if already loaded
            if (this.scripts[name] && this.scripts[name].loaded) {
                resolve({ src: name, loaded: true, status: 'Already Loaded' });
                return;
            }
            // load script
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = this.scripts[name].src;
            if (script.readyState) { // IE
                script.onreadystatechange = () => {
                    if (script.readyState === 'loaded' || script.readyState === 'complete') {
                        script.onreadystatechange = null;
                        this.scripts[name].loaded = true;
                        resolve({ src: name, loaded: true, status: 'Loaded' });
                    }
                };
            }
            else { // Others
                script.onload = () => {
                    this.scripts[name].loaded = true;
                    resolve({ src: name, loaded: true, status: 'Loaded' });
                };
            }
            script.onerror = (error) => resolve({ src: name, loaded: false, status: 'Loaded' });
            document.getElementsByTagName('head')[0].appendChild(script);
        });
    }
}
ScriptService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ScriptService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItYWRzay1mb3JnZS12aWV3ZXIvc3JjL2xpYi9zZXJ2aWNlL3NjcmlwdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFlM0MsTUFBTSxPQUFPLGFBQWE7SUFJeEI7UUFGUSxZQUFPLEdBQXFCLEVBQUUsQ0FBQztRQUdyQyxnQkFBZ0I7SUFDbEIsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFHLElBQWM7UUFDM0IsTUFBTSxRQUFRLEdBQTBCLEVBQUUsQ0FBQztRQUUzQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFO2dCQUNqRCxPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUMzQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSxVQUFVLENBQUMsSUFBWTtRQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLDRCQUE0QjtZQUM1QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ25ELE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxPQUFPO2FBQ1I7WUFFRCxjQUFjO1lBQ2QsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFFcEMsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFLEVBQUcsS0FBSztnQkFDN0IsTUFBTSxDQUFDLGtCQUFrQixHQUFHLEdBQUcsRUFBRTtvQkFDL0IsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRTt3QkFDdEUsTUFBTSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQzt3QkFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO3dCQUVqQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7cUJBQ3hEO2dCQUNILENBQUMsQ0FBQzthQUNIO2lCQUFNLEVBQUcsU0FBUztnQkFDakIsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztvQkFFakMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUM7YUFDSDtZQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN6RixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBekRGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmRlY2xhcmUgdmFyIGRvY3VtZW50OiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyaXB0SW5mb0xvb2t1cCB7XG4gIFtrZXk6IHN0cmluZ106IFNjcmlwdEluZm87XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NyaXB0SW5mbyB7XG4gIHNyYzogc3RyaW5nO1xuICBsb2FkZWQ6IGJvb2xlYW47XG4gIHN0YXR1cz86IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcmlwdFNlcnZpY2Uge1xuXG4gIHByaXZhdGUgc2NyaXB0czogU2NyaXB0SW5mb0xvb2t1cCA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIE5vdGhpbmcgdG8gZG9cbiAgfVxuXG4gIHB1YmxpYyBsb2FkKC4uLnVybHM6IHN0cmluZ1tdKTogUHJvbWlzZTxTY3JpcHRJbmZvW10+IHtcbiAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxTY3JpcHRJbmZvPltdID0gW107XG5cbiAgICB1cmxzLmZvckVhY2goKHNyYykgPT4ge1xuICAgICAgaWYgKHRoaXMuc2NyaXB0c1tzcmNdICYmIHRoaXMuc2NyaXB0c1tzcmNdLmxvYWRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2NyaXB0c1tzcmNdID0geyBzcmMsIGxvYWRlZDogZmFsc2UgfTtcbiAgICAgIHJldHVybiBwcm9taXNlcy5wdXNoKHRoaXMubG9hZFNjcmlwdChzcmMpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cblxuICBwdWJsaWMgbG9hZFNjcmlwdChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFNjcmlwdEluZm8+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8gcmVzb2x2ZSBpZiBhbHJlYWR5IGxvYWRlZFxuICAgICAgaWYgKHRoaXMuc2NyaXB0c1tuYW1lXSAmJiB0aGlzLnNjcmlwdHNbbmFtZV0ubG9hZGVkKSB7XG4gICAgICAgIHJlc29sdmUoeyBzcmM6IG5hbWUsIGxvYWRlZDogdHJ1ZSwgc3RhdHVzOiAnQWxyZWFkeSBMb2FkZWQnIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGxvYWQgc2NyaXB0XG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBzY3JpcHQuc3JjID0gdGhpcy5zY3JpcHRzW25hbWVdLnNyYztcblxuICAgICAgaWYgKHNjcmlwdC5yZWFkeVN0YXRlKSB7ICAvLyBJRVxuICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgIGlmIChzY3JpcHQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRlZCcgfHwgc2NyaXB0LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zY3JpcHRzW25hbWVdLmxvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHJlc29sdmUoeyBzcmM6IG5hbWUsIGxvYWRlZDogdHJ1ZSwgc3RhdHVzOiAnTG9hZGVkJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgeyAgLy8gT3RoZXJzXG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zY3JpcHRzW25hbWVdLmxvYWRlZCA9IHRydWU7XG5cbiAgICAgICAgICByZXNvbHZlKHsgc3JjOiBuYW1lLCBsb2FkZWQ6IHRydWUsIHN0YXR1czogJ0xvYWRlZCcgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHNjcmlwdC5vbmVycm9yID0gKGVycm9yOiBhbnkpID0+IHJlc29sdmUoeyBzcmM6IG5hbWUsIGxvYWRlZDogZmFsc2UsIHN0YXR1czogJ0xvYWRlZCcgfSk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==