/// <reference types="forge-viewer" />
export class ViewerEventArgs {
}
export class AggregationSelectionChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT;
    }
}
export class AnimationReadyEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.ANIMATION_READY_EVENT;
    }
}
export class CameraChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.CAMERA_CHANGE_EVENT;
    }
}
export class CutplanesChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.CUTPLANES_CHANGE_EVENT;
    }
}
export class EscapeEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.ESCAPE_EVENT;
    }
}
export class ExplodeChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.EXPLODE_CHANGE_EVENT;
    }
}
export class ExtensionLoadedUnloadedEventArgs extends ViewerEventArgs {
}
export class ExtensionLoadedEventArgs extends ExtensionLoadedUnloadedEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.EXTENSION_LOADED_EVENT;
    }
}
export class ExtensionUnloadedEventArgs extends ExtensionLoadedUnloadedEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.EXTENSION_UNLOADED_EVENT;
    }
}
export class FinalFrameRenderedChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT;
    }
}
export class FitToViewEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.FIT_TO_VIEW_EVENT;
    }
}
export class FragmentsLoadedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.FRAGMENTS_LOADED_EVENT;
    }
}
export class FullscreenEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.FULLSCREEN_MODE_EVENT;
    }
}
export class GeometryLoadedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.GEOMETRY_LOADED_EVENT;
    }
}
export class HideEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.HIDE_EVENT;
    }
}
export class HyperlinkEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.HYPERLINK_EVENT;
    }
}
export class IsolateEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.ISOLATE_EVENT;
    }
}
export class LayerVisibilityEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT;
    }
}
export class LoadMissingGeometryEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.LOAD_MISSING_GEOMETRY;
    }
}
export class ModelRootLoadedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT;
    }
}
export class ModelUnloadedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.MODEL_UNLOADED_EVENT;
    }
}
export class NavigationModeChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT;
    }
}
export class ObjectTreeEventArgs extends ViewerEventArgs {
}
export class ObjectTreeCreatedEventArgs extends ObjectTreeEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT;
    }
}
export class ObjectTreeUnavailableEventArgs extends ObjectTreeEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT;
    }
}
export class PrefEventArgs extends ViewerEventArgs {
}
export class PrefChangedEventArgs extends PrefEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.PREF_CHANGED_EVENT;
    }
}
export class PrefResetEventArgs extends PrefEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.PREF_RESET_EVENT;
    }
}
export class ProgressUpdateEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.PROGRESS_UPDATE_EVENT;
    }
}
export class RenderOptionChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT;
    }
}
export class RenderPresentedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.RENDER_PRESENTED_EVENT;
    }
}
export class ResetEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.RESET_EVENT;
    }
}
export class RestoreDefaultSettingsEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT;
    }
}
export class SelectionChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.SELECTION_CHANGED_EVENT;
    }
}
export class ShowEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.SHOW_EVENT;
    }
}
export class TexturesLoadedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.TEXTURES_LOADED_EVENT;
    }
}
export class ToolChangedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.TOOL_CHANGE_EVENT;
    }
}
export class ViewerInitializedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.VIEWER_INITIALIZED;
    }
}
export class ViewerResizeEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.VIEWER_RESIZE_EVENT;
    }
}
export class ViewerStateRestoredEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT;
    }
}
export class ViewerUnInitializedEventArgs extends ViewerEventArgs {
    constructor() {
        super(...arguments);
        this.type = Autodesk.Viewing.VIEWER_UNINITIALIZED;
    }
}
/**
 * Base extension that all other extensions can inherit from
 */
export class Extension {
    constructor(viewer, options) {
        this.viewer = undefined;
        this.extOptions = undefined;
        this.eventArgsTypeMap = {};
        this.viewer = viewer;
        this.extOptions = options;
        this.registerEventTypes();
    }
    static registerExtension(extensionName, extension) {
        Autodesk.Viewing.theExtensionManager.registerExtension(extensionName, extension);
    }
    static unregisterExtension(extensionName) {
        Autodesk.Viewing.theExtensionManager.unregisterExtension(extensionName);
    }
    /** Register event args types that we will cast to 'proper' objects */
    registerEventTypes() {
        // tslint:disable:max-line-length
        this.eventArgsTypeMap[Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT] = AggregationSelectionChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.ANIMATION_READY_EVENT] = AnimationReadyEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.CAMERA_CHANGE_EVENT] = CameraChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.CUTPLANES_CHANGE_EVENT] = CutplanesChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.ESCAPE_EVENT] = EscapeEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.EXPLODE_CHANGE_EVENT] = ExplodeChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_LOADED_EVENT] = ExtensionLoadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.EXTENSION_UNLOADED_EVENT] = ExtensionUnloadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.FINAL_FRAME_RENDERED_CHANGED_EVENT] = FinalFrameRenderedChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.FIT_TO_VIEW_EVENT] = FitToViewEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.FRAGMENTS_LOADED_EVENT] = FragmentsLoadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.FULLSCREEN_MODE_EVENT] = FullscreenEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.GEOMETRY_LOADED_EVENT] = GeometryLoadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.HIDE_EVENT] = HideEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.HYPERLINK_EVENT] = HyperlinkEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.ISOLATE_EVENT] = IsolateEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.LAYER_VISIBILITY_CHANGED_EVENT] = LayerVisibilityEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.LOAD_MISSING_GEOMETRY] = LoadMissingGeometryEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT] = ModelRootLoadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.MODEL_UNLOADED_EVENT] = ModelUnloadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.NAVIGATION_MODE_CHANGED_EVENT] = NavigationModeChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT] = ObjectTreeCreatedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT] = ObjectTreeUnavailableEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.PREF_CHANGED_EVENT] = PrefChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.PREF_RESET_EVENT] = PrefResetEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.PROGRESS_UPDATE_EVENT] = ProgressUpdateEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.RENDER_OPTION_CHANGED_EVENT] = RenderOptionChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.RENDER_PRESENTED_EVENT] = RenderPresentedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.RESET_EVENT] = ResetEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.RESTORE_DEFAULT_SETTINGS_EVENT] = RestoreDefaultSettingsEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.SELECTION_CHANGED_EVENT] = SelectionChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.SHOW_EVENT] = ShowEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.TEXTURES_LOADED_EVENT] = TexturesLoadedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.TOOL_CHANGE_EVENT] = ToolChangedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_INITIALIZED] = ViewerInitializedEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_RESIZE_EVENT] = ViewerResizeEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_STATE_RESTORED_EVENT] = ViewerStateRestoredEventArgs;
        this.eventArgsTypeMap[Autodesk.Viewing.VIEWER_UNINITIALIZED] = ViewerUnInitializedEventArgs;
        // tslint:enable:max-line-length
    }
    /** Cast Viewer event args to class */
    castArgs(args) {
        if (Array.isArray(args)) {
            return args.map(this.castArgs);
        }
        if (!args || typeof args !== 'object' || !args.hasOwnProperty('type')) {
            // Can't cast this object
            return args;
        }
        // Create new object of appropriate type
        const clazz = this.eventArgsTypeMap[args.type];
        const typedItem = Object.create(clazz.prototype);
        // Cast any properties
        for (const k of Object.keys(args)) {
            typedItem[k] = this.castArgs(args[k]);
        }
        return typedItem;
    }
}
Extension.extensionName = '';
//# sourceMappingURL=data:application/json;base64,