import { fromEvent, merge } from 'rxjs';
import { map } from 'rxjs/operators';
import { Extension } from './extension';
export class BasicExtension extends Extension {
    constructor() {
        super(...arguments);
        this.eventStreams = [];
        this.events = [
            Autodesk.Viewing.FIT_TO_VIEW_EVENT,
            Autodesk.Viewing.FULLSCREEN_MODE_EVENT,
            Autodesk.Viewing.GEOMETRY_LOADED_EVENT,
            Autodesk.Viewing.HIDE_EVENT,
            Autodesk.Viewing.ISOLATE_EVENT,
            Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT,
            Autodesk.Viewing.OBJECT_TREE_UNAVAILABLE_EVENT,
            Autodesk.Viewing.RESET_EVENT,
            Autodesk.Viewing.SELECTION_CHANGED_EVENT,
            Autodesk.Viewing.SHOW_EVENT,
        ];
    }
    static registerExtension(extensionName, callback) {
        BasicExtension.callback = callback;
        super.registerExtension(BasicExtension.extensionName, BasicExtension);
    }
    load() {
        this.events.forEach((eventName) => {
            const obs = fromEvent(this.viewer, eventName).pipe(map(args => this.castArgs(args)));
            this.eventStreams.push(obs);
        });
        this.viewerEvents = merge(...this.eventStreams);
        if (BasicExtension.debugMessages)
            console.log(BasicExtension.extensionName, 'loaded!');
        if (BasicExtension.callback)
            BasicExtension.callback(this);
        return true;
    }
    unload() {
        this.eventStreams = [];
        this.viewerEvents = undefined;
        if (BasicExtension.debugMessages)
            console.log(BasicExtension.extensionName, 'unloaded!');
        return true;
    }
    activate() {
        return true;
    }
    deactivate() {
        return true;
    }
}
BasicExtension.extensionName = 'BasicExtension';
BasicExtension.debugMessages = false;
BasicExtension.callback = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMtZXh0ZW5zaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmcyLWFkc2stZm9yZ2Utdmlld2VyL3NyYy9saWIvZXh0ZW5zaW9ucy9iYXNpYy1leHRlbnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxTQUFTLEVBQW1CLE1BQU0sYUFBYSxDQUFDO0FBRXpELE1BQU0sT0FBTyxjQUFlLFNBQVEsU0FBUztJQUE3Qzs7UUFPWSxpQkFBWSxHQUFrQyxFQUFFLENBQUM7UUFFeEMsV0FBTSxHQUFhO1lBQ3BDLFFBQVEsQ0FBQyxPQUFPLENBQUMsaUJBQWlCO1lBQ2xDLFFBQVEsQ0FBQyxPQUFPLENBQUMscUJBQXFCO1lBQ3RDLFFBQVEsQ0FBQyxPQUFPLENBQUMscUJBQXFCO1lBQ3RDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVTtZQUMzQixRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFDOUIsUUFBUSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUI7WUFDMUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkI7WUFDOUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQzVCLFFBQVEsQ0FBQyxPQUFPLENBQUMsdUJBQXVCO1lBQ3hDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBVTtTQUM1QixDQUFDO0lBbUNKLENBQUM7SUFqQ1EsTUFBTSxDQUFDLGlCQUFpQixDQUFDLGFBQXFCLEVBQUUsUUFBdUM7UUFDNUYsY0FBYyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDbkMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ2hDLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWhELElBQUksY0FBYyxDQUFDLGFBQWE7WUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkYsSUFBSSxjQUFjLENBQUMsUUFBUTtZQUFFLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRTlCLElBQUksY0FBYyxDQUFDLGFBQWE7WUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDekYsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBckRhLDRCQUFhLEdBQVcsZ0JBQWdCLENBQUM7QUFDekMsNEJBQWEsR0FBWSxLQUFLLENBQUM7QUFFOUIsdUJBQVEsR0FBa0MsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbUV2ZW50LCBtZXJnZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFeHRlbnNpb24sIFZpZXdlckV2ZW50QXJncyB9IGZyb20gJy4vZXh0ZW5zaW9uJztcblxuZXhwb3J0IGNsYXNzIEJhc2ljRXh0ZW5zaW9uIGV4dGVuZHMgRXh0ZW5zaW9uIHtcbiAgcHVibGljIHN0YXRpYyBleHRlbnNpb25OYW1lOiBzdHJpbmcgPSAnQmFzaWNFeHRlbnNpb24nO1xuICBwdWJsaWMgc3RhdGljIGRlYnVnTWVzc2FnZXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIHN0YXRpYyBjYWxsYmFjazogKGV4dDogQmFzaWNFeHRlbnNpb24pID0+IHZvaWQgPSBudWxsO1xuXG4gIHB1YmxpYyB2aWV3ZXJFdmVudHM6IE9ic2VydmFibGU8Vmlld2VyRXZlbnRBcmdzPjtcbiAgcHJvdGVjdGVkIGV2ZW50U3RyZWFtczogT2JzZXJ2YWJsZTxWaWV3ZXJFdmVudEFyZ3M+W10gPSBbXTtcblxuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZXZlbnRzOiBzdHJpbmdbXSA9IFtcbiAgICBBdXRvZGVzay5WaWV3aW5nLkZJVF9UT19WSUVXX0VWRU5ULFxuICAgIEF1dG9kZXNrLlZpZXdpbmcuRlVMTFNDUkVFTl9NT0RFX0VWRU5ULFxuICAgIEF1dG9kZXNrLlZpZXdpbmcuR0VPTUVUUllfTE9BREVEX0VWRU5ULFxuICAgIEF1dG9kZXNrLlZpZXdpbmcuSElERV9FVkVOVCxcbiAgICBBdXRvZGVzay5WaWV3aW5nLklTT0xBVEVfRVZFTlQsXG4gICAgQXV0b2Rlc2suVmlld2luZy5PQkpFQ1RfVFJFRV9DUkVBVEVEX0VWRU5ULFxuICAgIEF1dG9kZXNrLlZpZXdpbmcuT0JKRUNUX1RSRUVfVU5BVkFJTEFCTEVfRVZFTlQsXG4gICAgQXV0b2Rlc2suVmlld2luZy5SRVNFVF9FVkVOVCxcbiAgICBBdXRvZGVzay5WaWV3aW5nLlNFTEVDVElPTl9DSEFOR0VEX0VWRU5ULFxuICAgIEF1dG9kZXNrLlZpZXdpbmcuU0hPV19FVkVOVCxcbiAgXTtcblxuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyRXh0ZW5zaW9uKGV4dGVuc2lvbk5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChleHQ6IEJhc2ljRXh0ZW5zaW9uKSA9PiB2b2lkKSB7XG4gICAgQmFzaWNFeHRlbnNpb24uY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICBzdXBlci5yZWdpc3RlckV4dGVuc2lvbihCYXNpY0V4dGVuc2lvbi5leHRlbnNpb25OYW1lLCBCYXNpY0V4dGVuc2lvbik7XG4gIH1cblxuICBwdWJsaWMgbG9hZCgpIHtcbiAgICB0aGlzLmV2ZW50cy5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IG9icyA9IGZyb21FdmVudCh0aGlzLnZpZXdlciwgZXZlbnROYW1lKS5waXBlKG1hcChhcmdzID0+IHRoaXMuY2FzdEFyZ3MoYXJncykpKTtcbiAgICAgIHRoaXMuZXZlbnRTdHJlYW1zLnB1c2gob2JzKTtcbiAgICB9KTtcblxuICAgIHRoaXMudmlld2VyRXZlbnRzID0gbWVyZ2UoLi4udGhpcy5ldmVudFN0cmVhbXMpO1xuXG4gICAgaWYgKEJhc2ljRXh0ZW5zaW9uLmRlYnVnTWVzc2FnZXMpIGNvbnNvbGUubG9nKEJhc2ljRXh0ZW5zaW9uLmV4dGVuc2lvbk5hbWUsICdsb2FkZWQhJyk7XG4gICAgaWYgKEJhc2ljRXh0ZW5zaW9uLmNhbGxiYWNrKSBCYXNpY0V4dGVuc2lvbi5jYWxsYmFjayh0aGlzKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyB1bmxvYWQoKSB7XG4gICAgdGhpcy5ldmVudFN0cmVhbXMgPSBbXTtcbiAgICB0aGlzLnZpZXdlckV2ZW50cyA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChCYXNpY0V4dGVuc2lvbi5kZWJ1Z01lc3NhZ2VzKSBjb25zb2xlLmxvZyhCYXNpY0V4dGVuc2lvbi5leHRlbnNpb25OYW1lLCAndW5sb2FkZWQhJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgYWN0aXZhdGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgZGVhY3RpdmF0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19