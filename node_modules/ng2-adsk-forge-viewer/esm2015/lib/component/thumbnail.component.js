import { Component, Input } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
export class ThumbnailComponent {
    constructor(http, sanitizer) {
        this.http = http;
        this.sanitizer = sanitizer;
    }
    ngOnChanges() {
        if (this.thumbnailOptions) {
            this.setImageSrc(this.thumbnailOptions.defaultImageSrc);
            this.getThumbnail(this.thumbnailOptions.documentId);
        }
    }
    getThumbnail(documentId) {
        let url = `https://developer.api.autodesk.com/modelderivative/v2/designdata/${documentId}/thumbnail`;
        let opts = '';
        if (this.thumbnailOptions.width)
            opts += `width=${this.thumbnailOptions.width}&`;
        if (this.thumbnailOptions.height)
            opts += `height=${this.thumbnailOptions.height}&`;
        if (opts)
            url += `?${opts.slice(0, -1)}`;
        this.thumbnailOptions.getAccessToken(this.setAccessToken.bind(this));
        const headers = {
            Authorization: `Bearer ${this.token}`,
            'Content-Type': 'image/png',
        };
        this.http.get(url, { headers, responseType: 'arraybuffer' })
            .subscribe(data => (data) ? this.setImageSrc(`data:image/png;base64,${this.toBase64(data)}`)
            : this.setImageSrc(), error => this.setImageSrc());
    }
    setAccessToken(accessToken, expiryTime) {
        this.token = accessToken;
        this.expire = expiryTime;
    }
    toBase64(data) {
        return btoa(String.fromCharCode(...new Uint8Array(data)));
    }
    setImageSrc(src = '') {
        let imageSrc = '';
        if (src) {
            imageSrc = src;
        }
        else {
            imageSrc = (this.thumbnailOptions && this.thumbnailOptions.defaultImageSrc) || '';
        }
        this.imageSrc = this.sanitizer.bypassSecurityTrustUrl(imageSrc);
    }
}
ThumbnailComponent.decorators = [
    { type: Component, args: [{
                selector: 'adsk-forge-thumbnail',
                template: "<img [src]=\"imageSrc\" />\n"
            },] }
];
/** @nocollapse */
ThumbnailComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: DomSanitizer }
];
ThumbnailComponent.propDecorators = {
    thumbnailOptions: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGh1bWJuYWlsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1hZHNrLWZvcmdlLXZpZXdlci9zcmMvbGliL2NvbXBvbmVudC90aHVtYm5haWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzVELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFjbEUsTUFBTSxPQUFPLGtCQUFrQjtJQU83QixZQUNVLElBQWdCLEVBQ2hCLFNBQXVCO1FBRHZCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBYztJQUM3QixDQUFDO0lBRUUsV0FBVztRQUNoQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNyRDtJQUNILENBQUM7SUFFTyxZQUFZLENBQUMsVUFBa0I7UUFDckMsSUFBSSxHQUFHLEdBQUcsb0VBQW9FLFVBQVUsWUFBWSxDQUFDO1FBRXJHLElBQUksSUFBSSxHQUFXLEVBQUUsQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO1lBQUUsSUFBSSxJQUFJLFNBQVMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssR0FBRyxDQUFDO1FBQ2pGLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU07WUFBRSxJQUFJLElBQUksVUFBVSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDcEYsSUFBSSxJQUFJO1lBQUUsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRXpDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRSxNQUFNLE9BQU8sR0FBRztZQUNkLGFBQWEsRUFBRSxVQUFVLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDckMsY0FBYyxFQUFFLFdBQVc7U0FDNUIsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLENBQUM7YUFDekQsU0FBUyxDQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQy9FLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQ3RCLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUM1QixDQUFDO0lBQ04sQ0FBQztJQUVPLGNBQWMsQ0FBQyxXQUFtQixFQUFFLFVBQWtCO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFTyxRQUFRLENBQUMsSUFBaUI7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLElBQUksQ0FBUSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRU8sV0FBVyxDQUFDLE1BQWMsRUFBRTtRQUNsQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbEIsSUFBSSxHQUFHLEVBQUU7WUFDUCxRQUFRLEdBQUcsR0FBRyxDQUFDO1NBQ2hCO2FBQU07WUFDTCxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNuRjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7WUFoRUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLHdDQUF5QzthQUMxQzs7OztZQWRRLFVBQVU7WUFDVixZQUFZOzs7K0JBZWxCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuZXhwb3J0IGludGVyZmFjZSBUaHVtYm5haWxPcHRpb25zIHtcbiAgZ2V0QWNjZXNzVG9rZW4/OiAob25HZXRBY2Nlc3NUb2tlbjogKHRva2VuOiBzdHJpbmcsIGV4cGlyZTogbnVtYmVyKSA9PiB2b2lkKSA9PiB2b2lkO1xuICBkb2N1bWVudElkOiBzdHJpbmc7XG4gIHdpZHRoPzogMTAwfDIwMHw0MDA7XG4gIGhlaWdodD86IDEwMHwyMDB8NDAwO1xuICBkZWZhdWx0SW1hZ2VTcmM/OiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Fkc2stZm9yZ2UtdGh1bWJuYWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RodW1ibmFpbC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFRodW1ibmFpbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHB1YmxpYyB0aHVtYm5haWxPcHRpb25zOiBUaHVtYm5haWxPcHRpb25zO1xuICBwdWJsaWMgaW1hZ2VTcmM6IFNhZmVVcmw7XG5cbiAgcHJpdmF0ZSB0b2tlbjogc3RyaW5nO1xuICBwcml2YXRlIGV4cGlyZTogbnVtYmVyOyAgIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgKSB7IH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMudGh1bWJuYWlsT3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRJbWFnZVNyYyh0aGlzLnRodW1ibmFpbE9wdGlvbnMuZGVmYXVsdEltYWdlU3JjKTtcbiAgICAgIHRoaXMuZ2V0VGh1bWJuYWlsKHRoaXMudGh1bWJuYWlsT3B0aW9ucy5kb2N1bWVudElkKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRodW1ibmFpbChkb2N1bWVudElkOiBzdHJpbmcpIHtcbiAgICBsZXQgdXJsID0gYGh0dHBzOi8vZGV2ZWxvcGVyLmFwaS5hdXRvZGVzay5jb20vbW9kZWxkZXJpdmF0aXZlL3YyL2Rlc2lnbmRhdGEvJHtkb2N1bWVudElkfS90aHVtYm5haWxgO1xuXG4gICAgbGV0IG9wdHM6IHN0cmluZyA9ICcnO1xuICAgIGlmICh0aGlzLnRodW1ibmFpbE9wdGlvbnMud2lkdGgpIG9wdHMgKz0gYHdpZHRoPSR7dGhpcy50aHVtYm5haWxPcHRpb25zLndpZHRofSZgO1xuICAgIGlmICh0aGlzLnRodW1ibmFpbE9wdGlvbnMuaGVpZ2h0KSBvcHRzICs9IGBoZWlnaHQ9JHt0aGlzLnRodW1ibmFpbE9wdGlvbnMuaGVpZ2h0fSZgO1xuICAgIGlmIChvcHRzKSB1cmwgKz0gYD8ke29wdHMuc2xpY2UoMCwgLTEpfWA7XG5cbiAgICB0aGlzLnRodW1ibmFpbE9wdGlvbnMuZ2V0QWNjZXNzVG9rZW4odGhpcy5zZXRBY2Nlc3NUb2tlbi5iaW5kKHRoaXMpKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMudG9rZW59YCxcbiAgICAgICdDb250ZW50LVR5cGUnOiAnaW1hZ2UvcG5nJyxcbiAgICB9O1xuXG4gICAgdGhpcy5odHRwLmdldCh1cmwsIHsgaGVhZGVycywgcmVzcG9uc2VUeXBlOiAnYXJyYXlidWZmZXInIH0pXG4gICAgICAuc3Vic2NyaWJlKFxuICAgICAgICBkYXRhID0+IChkYXRhKSA/IHRoaXMuc2V0SW1hZ2VTcmMoYGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke3RoaXMudG9CYXNlNjQoZGF0YSl9YClcbiAgICAgICAgICA6IHRoaXMuc2V0SW1hZ2VTcmMoKSxcbiAgICAgICAgZXJyb3IgPT4gdGhpcy5zZXRJbWFnZVNyYygpLFxuICAgICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0QWNjZXNzVG9rZW4oYWNjZXNzVG9rZW46IHN0cmluZywgZXhwaXJ5VGltZTogbnVtYmVyKSB7XG4gICAgdGhpcy50b2tlbiA9IGFjY2Vzc1Rva2VuO1xuICAgIHRoaXMuZXhwaXJlID0gZXhwaXJ5VGltZTtcbiAgfVxuXG4gIHByaXZhdGUgdG9CYXNlNjQoZGF0YTogQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KGRhdGEpIGFzIGFueSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRJbWFnZVNyYyhzcmM6IHN0cmluZyA9ICcnKSB7XG4gICAgbGV0IGltYWdlU3JjID0gJyc7XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZVNyYyA9IHNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VTcmMgPSAodGhpcy50aHVtYm5haWxPcHRpb25zICYmIHRoaXMudGh1bWJuYWlsT3B0aW9ucy5kZWZhdWx0SW1hZ2VTcmMpIHx8ICcnO1xuICAgIH1cblxuICAgIHRoaXMuaW1hZ2VTcmMgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0VXJsKGltYWdlU3JjKTtcbiAgfVxufVxuIl19