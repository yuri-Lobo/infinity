import { __awaiter } from "tslib";
/// <reference types="forge-viewer" />
import { takeUntil } from 'rxjs/operators';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { ScriptService } from '../service/script.service';
import { FitToViewEventArgs, FullscreenEventArgs, GeometryLoadedEventArgs, HideEventArgs, IsolateEventArgs, ObjectTreeCreatedEventArgs, ObjectTreeUnavailableEventArgs, ResetEventArgs, SelectionChangedEventArgs, ShowEventArgs, } from '../extensions/extension';
import { BasicExtension } from '../extensions/basic-extension';
export class ViewerComponent {
    constructor(script) {
        this.script = script;
        this.onDocumentChanged = new EventEmitter();
        this.onItemLoaded = new EventEmitter();
        this.onError = new EventEmitter();
        // Viewer events
        this.onFitToView = new EventEmitter();
        this.onFullscreen = new EventEmitter();
        this.onGeometryLoaded = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onIsolate = new EventEmitter();
        this.onObjectTreeCreated = new EventEmitter();
        this.onObjectTreeUnavailable = new EventEmitter();
        this.onReset = new EventEmitter();
        this.onSelectionChanged = new EventEmitter();
        this.onShow = new EventEmitter();
        // Debugging
        this.showDebugMessages = false;
        this._viewerOptions = null;
        this.viewerInitialized = false;
        this.unsubscribe = new Subject();
        this.containerId = this.getDivName();
    }
    /**
     * Helper to allow callers to specify documentId with or without the required urn: prefix
     */
    static verifyUrn(documentId) {
        return (documentId.startsWith('urn:')) ? documentId : `urn:${documentId}`;
    }
    set viewerOptions(options) {
        if (!this.viewerInitialized && options) {
            this._viewerOptions = options;
            void this.initialiseViewer();
        }
    }
    get viewerOptions() {
        return this._viewerOptions;
    }
    ngOnDestroy() {
        this.unregisterBasicExtension();
        if (this.viewer) {
            this.viewer.tearDown();
            this.viewer.uninitialize();
        }
        this.viewer = null;
        this.viewerInitialized = false;
        this.unsubscribe.next();
        this.unsubscribe.complete();
    }
    /**
     * Helper method to get some default viewer options
     */
    getDefaultViewerOptions(onViewerInitialized, getAccessToken) {
        return {
            initializerOptions: {
                env: 'AutodeskProduction',
                getAccessToken,
                api: 'derivativeV2',
            },
            onViewerInitialized,
        };
    }
    /**
     * Get a reference to the current 3D viewer
     */
    get Viewer3D() {
        return this.viewer;
    }
    /**
     * Get the document urn that has been loaded
     */
    get DocumentId() {
        return this.documentId;
    }
    /**
     * Set the document urn, which triggers the viewer to load the document
     */
    set DocumentId(value) {
        this.documentId = value;
        this.loadModel(this.documentId);
    }
    /**
     * Get the container element
     */
    get Container() {
        return document.getElementById(this.containerId);
    }
    /**
     * Get the id assigned to the viewer
     */
    get ContainerId() {
        return this.containerId;
    }
    get basicExtension() {
        return this.basicExt;
    }
    get extensionEvents() {
        if (this.basicExt) {
            return this.basicExt.viewerEvents;
        }
    }
    loadDocumentNode(document, bubbleNode, options) {
        return this.viewer.loadDocumentNode(document, bubbleNode, options);
    }
    /**
     * We don't bundle Autodesk's scripts with the component, and we don't really want users to have
     * to add the scripts to their index.html pages. So we'll load them when required.
     */
    loadScripts() {
        const version = this.viewerOptions.version || '7.*';
        const url = `https://developer.api.autodesk.com/modelderivative/v2/viewers/${version}/viewer3D.min.js`;
        return this.script.load(url)
            .then((data) => {
            this.log('script loaded ', data);
        })
            .catch(error => this.error(error));
    }
    /**
     * Initialises the viewer
     */
    initialiseViewer() {
        return __awaiter(this, void 0, void 0, function* () {
            // Load scripts first
            yield this.loadScripts();
            if (this.viewerOptions.onViewerScriptsLoaded)
                this.viewerOptions.onViewerScriptsLoaded();
            // Check if the viewer has already been initialised - this isn't the nicest, but we've set the env in our
            // options above so we at least know that it was us who did this!
            if (!Autodesk.Viewing.Private.env) {
                Autodesk.Viewing.Initializer(this.viewerOptions.initializerOptions, () => {
                    this.initialized();
                });
            }
            else {
                // We need to give an initialised viewing application a tick to allow the DOM element
                // to be established before we re-draw
                setTimeout(() => {
                    this.initialized();
                });
            }
        });
    }
    initialized() {
        var _a, _b;
        // Register an extension to help us raise events
        const extName = this.registerBasicExtension();
        const config = this.addBasicExtensionConfig(extName);
        // Support large models
        if (this.viewerOptions.enableMemoryManagement) {
            config.loaderExtensions = { svf: 'Autodesk.MemoryLimited' };
        }
        // Create a new viewer
        if (this.viewerOptions.headlessViewer) {
            this.viewer = new Autodesk.Viewing.Viewer3D(this.Container, config);
        }
        else {
            this.viewer = new Autodesk.Viewing.GuiViewer3D(this.Container, config);
        }
        // set a document url if environment set to Local
        let url;
        if (((_a = this.viewerOptions.initializerOptions) === null || _a === void 0 ? void 0 : _a.env) === 'Local') {
            url = (_b = this.viewerOptions.initializerOptions) === null || _b === void 0 ? void 0 : _b.document;
        }
        // Start the viewer
        this.viewer.start(url);
        // Viewer is ready - scripts are loaded and we've create a new viewing application
        this.viewerInitialized = true;
        this.viewerOptions.onViewerInitialized({ viewerComponent: this, viewer: this.viewer });
    }
    /**
     * Loads a model in to the viewer via it's urn
     */
    loadModel(documentId) {
        if (!documentId) {
            return;
        }
        // Add urn: to the beginning of document id if needed
        Autodesk.Viewing.Document.load(ViewerComponent.verifyUrn(documentId), this.onDocumentLoadSuccess.bind(this), this.onDocumentLoadFailure.bind(this));
    }
    /**
     * Document successfully loaded
     */
    onDocumentLoadSuccess(document) {
        if (!document.getRoot())
            return;
        // Emit an event so the caller can do something
        // TODO: config option to specify which viewable to display (how?)
        this.onDocumentChanged.emit({ document, viewerComponent: this, viewer: this.viewer });
        if (this.viewerOptions.showFirstViewable === undefined || this.viewerOptions.showFirstViewable) {
            let model = document.getRoot().getDefaultGeometry();
            if (!model) {
                const allModels = document.getRoot().search({ type: 'geometry' });
                model = allModels[0];
            }
            void this.viewer.loadDocumentNode(document, model, undefined);
        }
    }
    /**
     * Failed to load document
     */
    onDocumentLoadFailure(errorCode) {
        this.error('onDocumentLoadFailure() - errorCode:' + errorCode);
        this.onError.emit(errorCode);
    }
    /**
     * Register our BasicExtension with the Forge Viewer
     */
    registerBasicExtension() {
        BasicExtension.registerExtension(BasicExtension.extensionName, this.extensionLoaded.bind(this));
        return BasicExtension.extensionName;
    }
    /**
     * Subscript to BasicExtension events when the extension has been
     * succesfully loaded by the viewer.
     */
    extensionLoaded(ext) {
        this.basicExt = ext;
        ext.viewerEvents
            .pipe(takeUntil(this.unsubscribe))
            .subscribe((item) => {
            this.log(item);
            if (item instanceof FitToViewEventArgs) {
                this.onFitToView.emit(item);
            }
            else if (item instanceof FullscreenEventArgs) {
                this.onFullscreen.emit(item);
            }
            else if (item instanceof GeometryLoadedEventArgs) {
                this.onGeometryLoaded.emit(item);
            }
            else if (item instanceof HideEventArgs) {
                this.onHide.emit(item);
            }
            else if (item instanceof IsolateEventArgs) {
                this.onIsolate.emit(item);
            }
            else if (item instanceof ObjectTreeCreatedEventArgs) {
                this.onObjectTreeCreated.emit(item);
            }
            else if (item instanceof ObjectTreeUnavailableEventArgs) {
                this.onObjectTreeUnavailable.emit(item);
            }
            else if (item instanceof ResetEventArgs) {
                this.onReset.emit(item);
            }
            else if (item instanceof SelectionChangedEventArgs) {
                this.onSelectionChanged.emit(item);
            }
            else if (item instanceof ShowEventArgs) {
                this.onShow.emit(item);
            }
        });
    }
    unregisterBasicExtension() {
        BasicExtension.unregisterExtension(BasicExtension.extensionName);
        this.basicExt = null;
    }
    /**
     * Add list of extensions to the viewer config that has been provided
     * The allows the user to register their own extensions.
     */
    addBasicExtensionConfig(extName) {
        const config = Object.assign({}, this.viewerOptions.viewerConfig, { extensions: [] });
        // We will always load our basic extension with any others specified by the caller
        if (this.viewerOptions.viewerConfig && this.viewerOptions.viewerConfig.extensions) {
            config.extensions = [...this.viewerOptions.viewerConfig.extensions, extName];
        }
        else {
            config.extensions = [extName];
        }
        return config;
    }
    log(message, ...optionalParams) {
        if (!this.showDebugMessages)
            return;
        console.log(message, optionalParams);
    }
    error(message, ...optionalParams) {
        if (!this.showDebugMessages)
            return;
        console.error(message, optionalParams);
    }
    getDivName() {
        const S4 = () => {
            // tslint:disable-next-line:no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        const guid = (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
        return `viewer_${guid}`;
    }
}
ViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'adsk-forge-viewer',
                template: "<div [id]=\"containerId\" class=\"forge-viewer-container\"></div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["@import url(\"https://developer.api.autodesk.com/modelderivative/v2/viewers/7.*/style.min.css\");"]
            },] }
];
/** @nocollapse */
ViewerComponent.ctorParameters = () => [
    { type: ScriptService }
];
ViewerComponent.propDecorators = {
    onDocumentChanged: [{ type: Output }],
    onItemLoaded: [{ type: Output }],
    onError: [{ type: Output }],
    onFitToView: [{ type: Output }],
    onFullscreen: [{ type: Output }],
    onGeometryLoaded: [{ type: Output }],
    onHide: [{ type: Output }],
    onIsolate: [{ type: Output }],
    onObjectTreeCreated: [{ type: Output }],
    onObjectTreeUnavailable: [{ type: Output }],
    onReset: [{ type: Output }],
    onSelectionChanged: [{ type: Output }],
    onShow: [{ type: Output }],
    showDebugMessages: [{ type: Input }],
    viewerOptions: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,